
Microcontroller_Lab1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001c04  080001d8  080001d8  000011d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  08001ddc  08001ddc  00002ddc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001dec  08001dec  00003060  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  08001dec  08001dec  00003060  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  08001dec  08001dec  00003060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001dec  08001dec  00002dec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08001df0  08001df0  00002df0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000060  20000000  08001df4  00003000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000060  20000060  08001e54  00003060  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000c0  08001e54  000030c0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00003060  2**0
                  CONTENTS, READONLY
 12 .debug_info   00004cd1  00000000  00000000  00003090  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000011c0  00000000  00000000  00007d61  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000005e0  00000000  00000000  00008f28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000044f  00000000  00000000  00009508  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00023206  00000000  00000000  00009957  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000602e  00000000  00000000  0002cb5d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000def9f  00000000  00000000  00032b8b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00111b2a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000015c8  00000000  00000000  00111b70  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000070  00000000  00000000  00113138  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	@ (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	@ (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	@ (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	20000060 	.word	0x20000060
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08001dc4 	.word	0x08001dc4

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	@ (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	@ (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	@ (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000064 	.word	0x20000064
 8000214:	08001dc4 	.word	0x08001dc4

08000218 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000218:	b580      	push	{r7, lr}
 800021a:	b082      	sub	sp, #8
 800021c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800021e:	f000 fc74 	bl	8000b0a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000222:	f000 f8bd 	bl	80003a0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000226:	f000 f907 	bl	8000438 <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */
	getOutput(0);
 800022a:	2000      	movs	r0, #0
 800022c:	f000 fb24 	bl	8000878 <getOutput>
	while (1) {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
		static uint32_t BTMX_TimeStamp = 0;
		if (HAL_GetTick() > BTMX_TimeStamp) {
 8000230:	f000 fcd0 	bl	8000bd4 <HAL_GetTick>
 8000234:	4602      	mov	r2, r0
 8000236:	4b4f      	ldr	r3, [pc, #316]	@ (8000374 <main+0x15c>)
 8000238:	681b      	ldr	r3, [r3, #0]
 800023a:	429a      	cmp	r2, r3
 800023c:	d910      	bls.n	8000260 <main+0x48>
			BTMX_TimeStamp = HAL_GetTick() + 25;
 800023e:	f000 fcc9 	bl	8000bd4 <HAL_GetTick>
 8000242:	4603      	mov	r3, r0
 8000244:	3319      	adds	r3, #25
 8000246:	4a4b      	ldr	r2, [pc, #300]	@ (8000374 <main+0x15c>)
 8000248:	6013      	str	r3, [r2, #0]
			ButtonMatrixRead();
 800024a:	f000 fa09 	bl	8000660 <ButtonMatrixRead>
			input = getButtonIndex(ButtonState);
 800024e:	4b4a      	ldr	r3, [pc, #296]	@ (8000378 <main+0x160>)
 8000250:	881b      	ldrh	r3, [r3, #0]
 8000252:	4618      	mov	r0, r3
 8000254:	f000 fa82 	bl	800075c <getButtonIndex>
 8000258:	4603      	mov	r3, r0
 800025a:	b29a      	uxth	r2, r3
 800025c:	4b47      	ldr	r3, [pc, #284]	@ (800037c <main+0x164>)
 800025e:	801a      	strh	r2, [r3, #0]
		}
		if (input == 12) {
 8000260:	4b46      	ldr	r3, [pc, #280]	@ (800037c <main+0x164>)
 8000262:	881b      	ldrh	r3, [r3, #0]
 8000264:	2b0c      	cmp	r3, #12
 8000266:	d102      	bne.n	800026e <main+0x56>
			state_input = 0;
 8000268:	4b45      	ldr	r3, [pc, #276]	@ (8000380 <main+0x168>)
 800026a:	2200      	movs	r2, #0
 800026c:	601a      	str	r2, [r3, #0]
		}
		if (input != 12 && input != 10 && state_input == 0) {
 800026e:	4b43      	ldr	r3, [pc, #268]	@ (800037c <main+0x164>)
 8000270:	881b      	ldrh	r3, [r3, #0]
 8000272:	2b0c      	cmp	r3, #12
 8000274:	d0dc      	beq.n	8000230 <main+0x18>
 8000276:	4b41      	ldr	r3, [pc, #260]	@ (800037c <main+0x164>)
 8000278:	881b      	ldrh	r3, [r3, #0]
 800027a:	2b0a      	cmp	r3, #10
 800027c:	d0d8      	beq.n	8000230 <main+0x18>
 800027e:	4b40      	ldr	r3, [pc, #256]	@ (8000380 <main+0x168>)
 8000280:	681b      	ldr	r3, [r3, #0]
 8000282:	2b00      	cmp	r3, #0
 8000284:	d1d4      	bne.n	8000230 <main+0x18>
//			getOutput(input);
			if (inputCount < MAX_INPUT && input != 11) {
 8000286:	4b3f      	ldr	r3, [pc, #252]	@ (8000384 <main+0x16c>)
 8000288:	681a      	ldr	r2, [r3, #0]
 800028a:	4b3f      	ldr	r3, [pc, #252]	@ (8000388 <main+0x170>)
 800028c:	681b      	ldr	r3, [r3, #0]
 800028e:	429a      	cmp	r2, r3
 8000290:	da13      	bge.n	80002ba <main+0xa2>
 8000292:	4b3a      	ldr	r3, [pc, #232]	@ (800037c <main+0x164>)
 8000294:	881b      	ldrh	r3, [r3, #0]
 8000296:	2b0b      	cmp	r3, #11
 8000298:	d00f      	beq.n	80002ba <main+0xa2>
				pressedValues[inputCount] = input;
 800029a:	4b3a      	ldr	r3, [pc, #232]	@ (8000384 <main+0x16c>)
 800029c:	681b      	ldr	r3, [r3, #0]
 800029e:	4a37      	ldr	r2, [pc, #220]	@ (800037c <main+0x164>)
 80002a0:	8811      	ldrh	r1, [r2, #0]
 80002a2:	4a3a      	ldr	r2, [pc, #232]	@ (800038c <main+0x174>)
 80002a4:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
				inputCount++;
 80002a8:	4b36      	ldr	r3, [pc, #216]	@ (8000384 <main+0x16c>)
 80002aa:	681b      	ldr	r3, [r3, #0]
 80002ac:	3301      	adds	r3, #1
 80002ae:	4a35      	ldr	r2, [pc, #212]	@ (8000384 <main+0x16c>)
 80002b0:	6013      	str	r3, [r2, #0]
				state_check = 0;
 80002b2:	4b37      	ldr	r3, [pc, #220]	@ (8000390 <main+0x178>)
 80002b4:	2200      	movs	r2, #0
 80002b6:	601a      	str	r2, [r3, #0]
 80002b8:	e058      	b.n	800036c <main+0x154>
			} else {
				if (input == 11 && !state_check && inputCount >= MAX_INPUT) {
 80002ba:	4b30      	ldr	r3, [pc, #192]	@ (800037c <main+0x164>)
 80002bc:	881b      	ldrh	r3, [r3, #0]
 80002be:	2b0b      	cmp	r3, #11
 80002c0:	d154      	bne.n	800036c <main+0x154>
 80002c2:	4b33      	ldr	r3, [pc, #204]	@ (8000390 <main+0x178>)
 80002c4:	681b      	ldr	r3, [r3, #0]
 80002c6:	2b00      	cmp	r3, #0
 80002c8:	d150      	bne.n	800036c <main+0x154>
 80002ca:	4b2e      	ldr	r3, [pc, #184]	@ (8000384 <main+0x16c>)
 80002cc:	681a      	ldr	r2, [r3, #0]
 80002ce:	4b2e      	ldr	r3, [pc, #184]	@ (8000388 <main+0x170>)
 80002d0:	681b      	ldr	r3, [r3, #0]
 80002d2:	429a      	cmp	r2, r3
 80002d4:	db4a      	blt.n	800036c <main+0x154>
					state_check = 1;
 80002d6:	4b2e      	ldr	r3, [pc, #184]	@ (8000390 <main+0x178>)
 80002d8:	2201      	movs	r2, #1
 80002da:	601a      	str	r2, [r3, #0]
					for (int i = 0; i < MAX_INPUT; i++) {
 80002dc:	2300      	movs	r3, #0
 80002de:	607b      	str	r3, [r7, #4]
 80002e0:	e03f      	b.n	8000362 <main+0x14a>
						if (pressedValues[i] == password[i]) {
 80002e2:	4a2a      	ldr	r2, [pc, #168]	@ (800038c <main+0x174>)
 80002e4:	687b      	ldr	r3, [r7, #4]
 80002e6:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 80002ea:	492a      	ldr	r1, [pc, #168]	@ (8000394 <main+0x17c>)
 80002ec:	687b      	ldr	r3, [r7, #4]
 80002ee:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80002f2:	429a      	cmp	r2, r3
 80002f4:	d111      	bne.n	800031a <main+0x102>
							correct_count += 1;
 80002f6:	4b28      	ldr	r3, [pc, #160]	@ (8000398 <main+0x180>)
 80002f8:	681b      	ldr	r3, [r3, #0]
 80002fa:	3301      	adds	r3, #1
 80002fc:	4a26      	ldr	r2, [pc, #152]	@ (8000398 <main+0x180>)
 80002fe:	6013      	str	r3, [r2, #0]
							if (correct_count == 11) {
 8000300:	4b25      	ldr	r3, [pc, #148]	@ (8000398 <main+0x180>)
 8000302:	681b      	ldr	r3, [r3, #0]
 8000304:	2b0b      	cmp	r3, #11
 8000306:	d129      	bne.n	800035c <main+0x144>
								wrong_count = 4;
 8000308:	4b24      	ldr	r3, [pc, #144]	@ (800039c <main+0x184>)
 800030a:	2204      	movs	r2, #4
 800030c:	601a      	str	r2, [r3, #0]
								getOutput(wrong_count);
 800030e:	4b23      	ldr	r3, [pc, #140]	@ (800039c <main+0x184>)
 8000310:	681b      	ldr	r3, [r3, #0]
 8000312:	4618      	mov	r0, r3
 8000314:	f000 fab0 	bl	8000878 <getOutput>
 8000318:	e020      	b.n	800035c <main+0x144>
							}
						} else {
							wrong_count += 1;
 800031a:	4b20      	ldr	r3, [pc, #128]	@ (800039c <main+0x184>)
 800031c:	681b      	ldr	r3, [r3, #0]
 800031e:	3301      	adds	r3, #1
 8000320:	4a1e      	ldr	r2, [pc, #120]	@ (800039c <main+0x184>)
 8000322:	6013      	str	r3, [r2, #0]
							correct_count = 0;
 8000324:	4b1c      	ldr	r3, [pc, #112]	@ (8000398 <main+0x180>)
 8000326:	2200      	movs	r2, #0
 8000328:	601a      	str	r2, [r3, #0]
							inputCount = 0;
 800032a:	4b16      	ldr	r3, [pc, #88]	@ (8000384 <main+0x16c>)
 800032c:	2200      	movs	r2, #0
 800032e:	601a      	str	r2, [r3, #0]
							for (int i = 0; i < MAX_INPUT; i++) {
 8000330:	2300      	movs	r3, #0
 8000332:	603b      	str	r3, [r7, #0]
 8000334:	e007      	b.n	8000346 <main+0x12e>
								pressedValues[i] = 0;
 8000336:	4a15      	ldr	r2, [pc, #84]	@ (800038c <main+0x174>)
 8000338:	683b      	ldr	r3, [r7, #0]
 800033a:	2100      	movs	r1, #0
 800033c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
							for (int i = 0; i < MAX_INPUT; i++) {
 8000340:	683b      	ldr	r3, [r7, #0]
 8000342:	3301      	adds	r3, #1
 8000344:	603b      	str	r3, [r7, #0]
 8000346:	4b10      	ldr	r3, [pc, #64]	@ (8000388 <main+0x170>)
 8000348:	681b      	ldr	r3, [r3, #0]
 800034a:	683a      	ldr	r2, [r7, #0]
 800034c:	429a      	cmp	r2, r3
 800034e:	dbf2      	blt.n	8000336 <main+0x11e>
							}
							getOutput(wrong_count);
 8000350:	4b12      	ldr	r3, [pc, #72]	@ (800039c <main+0x184>)
 8000352:	681b      	ldr	r3, [r3, #0]
 8000354:	4618      	mov	r0, r3
 8000356:	f000 fa8f 	bl	8000878 <getOutput>
							break;
 800035a:	e007      	b.n	800036c <main+0x154>
					for (int i = 0; i < MAX_INPUT; i++) {
 800035c:	687b      	ldr	r3, [r7, #4]
 800035e:	3301      	adds	r3, #1
 8000360:	607b      	str	r3, [r7, #4]
 8000362:	4b09      	ldr	r3, [pc, #36]	@ (8000388 <main+0x170>)
 8000364:	681b      	ldr	r3, [r3, #0]
 8000366:	687a      	ldr	r2, [r7, #4]
 8000368:	429a      	cmp	r2, r3
 800036a:	dbba      	blt.n	80002e2 <main+0xca>
						}
					}
				}
			}
			state_input = 1;
 800036c:	4b04      	ldr	r3, [pc, #16]	@ (8000380 <main+0x168>)
 800036e:	2201      	movs	r2, #1
 8000370:	601a      	str	r2, [r3, #0]
	while (1) {
 8000372:	e75d      	b.n	8000230 <main+0x18>
 8000374:	200000b4 	.word	0x200000b4
 8000378:	2000007c 	.word	0x2000007c
 800037c:	2000007e 	.word	0x2000007e
 8000380:	20000084 	.word	0x20000084
 8000384:	20000080 	.word	0x20000080
 8000388:	20000038 	.word	0x20000038
 800038c:	2000009c 	.word	0x2000009c
 8000390:	20000088 	.word	0x20000088
 8000394:	2000003c 	.word	0x2000003c
 8000398:	2000008c 	.word	0x2000008c
 800039c:	20000090 	.word	0x20000090

080003a0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80003a0:	b580      	push	{r7, lr}
 80003a2:	b094      	sub	sp, #80	@ 0x50
 80003a4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80003a6:	f107 0318 	add.w	r3, r7, #24
 80003aa:	2238      	movs	r2, #56	@ 0x38
 80003ac:	2100      	movs	r1, #0
 80003ae:	4618      	mov	r0, r3
 80003b0:	f001 fcdc 	bl	8001d6c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80003b4:	1d3b      	adds	r3, r7, #4
 80003b6:	2200      	movs	r2, #0
 80003b8:	601a      	str	r2, [r3, #0]
 80003ba:	605a      	str	r2, [r3, #4]
 80003bc:	609a      	str	r2, [r3, #8]
 80003be:	60da      	str	r2, [r3, #12]
 80003c0:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 80003c2:	2000      	movs	r0, #0
 80003c4:	f000 ff28 	bl	8001218 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80003c8:	2302      	movs	r3, #2
 80003ca:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80003cc:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80003d0:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80003d2:	2340      	movs	r3, #64	@ 0x40
 80003d4:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80003d6:	2302      	movs	r3, #2
 80003d8:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80003da:	2302      	movs	r3, #2
 80003dc:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 80003de:	2304      	movs	r3, #4
 80003e0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 80003e2:	2355      	movs	r3, #85	@ 0x55
 80003e4:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80003e6:	2302      	movs	r3, #2
 80003e8:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80003ea:	2302      	movs	r3, #2
 80003ec:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80003ee:	2302      	movs	r3, #2
 80003f0:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80003f2:	f107 0318 	add.w	r3, r7, #24
 80003f6:	4618      	mov	r0, r3
 80003f8:	f000 ffc2 	bl	8001380 <HAL_RCC_OscConfig>
 80003fc:	4603      	mov	r3, r0
 80003fe:	2b00      	cmp	r3, #0
 8000400:	d001      	beq.n	8000406 <SystemClock_Config+0x66>
  {
    Error_Handler();
 8000402:	f000 fadd 	bl	80009c0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000406:	230f      	movs	r3, #15
 8000408:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800040a:	2303      	movs	r3, #3
 800040c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800040e:	2300      	movs	r3, #0
 8000410:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000412:	2300      	movs	r3, #0
 8000414:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000416:	2300      	movs	r3, #0
 8000418:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800041a:	1d3b      	adds	r3, r7, #4
 800041c:	2104      	movs	r1, #4
 800041e:	4618      	mov	r0, r3
 8000420:	f001 fac0 	bl	80019a4 <HAL_RCC_ClockConfig>
 8000424:	4603      	mov	r3, r0
 8000426:	2b00      	cmp	r3, #0
 8000428:	d001      	beq.n	800042e <SystemClock_Config+0x8e>
  {
    Error_Handler();
 800042a:	f000 fac9 	bl	80009c0 <Error_Handler>
  }
}
 800042e:	bf00      	nop
 8000430:	3750      	adds	r7, #80	@ 0x50
 8000432:	46bd      	mov	sp, r7
 8000434:	bd80      	pop	{r7, pc}
	...

08000438 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000438:	b580      	push	{r7, lr}
 800043a:	b08a      	sub	sp, #40	@ 0x28
 800043c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800043e:	f107 0314 	add.w	r3, r7, #20
 8000442:	2200      	movs	r2, #0
 8000444:	601a      	str	r2, [r3, #0]
 8000446:	605a      	str	r2, [r3, #4]
 8000448:	609a      	str	r2, [r3, #8]
 800044a:	60da      	str	r2, [r3, #12]
 800044c:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800044e:	4b61      	ldr	r3, [pc, #388]	@ (80005d4 <MX_GPIO_Init+0x19c>)
 8000450:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000452:	4a60      	ldr	r2, [pc, #384]	@ (80005d4 <MX_GPIO_Init+0x19c>)
 8000454:	f043 0304 	orr.w	r3, r3, #4
 8000458:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800045a:	4b5e      	ldr	r3, [pc, #376]	@ (80005d4 <MX_GPIO_Init+0x19c>)
 800045c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800045e:	f003 0304 	and.w	r3, r3, #4
 8000462:	613b      	str	r3, [r7, #16]
 8000464:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000466:	4b5b      	ldr	r3, [pc, #364]	@ (80005d4 <MX_GPIO_Init+0x19c>)
 8000468:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800046a:	4a5a      	ldr	r2, [pc, #360]	@ (80005d4 <MX_GPIO_Init+0x19c>)
 800046c:	f043 0320 	orr.w	r3, r3, #32
 8000470:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000472:	4b58      	ldr	r3, [pc, #352]	@ (80005d4 <MX_GPIO_Init+0x19c>)
 8000474:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000476:	f003 0320 	and.w	r3, r3, #32
 800047a:	60fb      	str	r3, [r7, #12]
 800047c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800047e:	4b55      	ldr	r3, [pc, #340]	@ (80005d4 <MX_GPIO_Init+0x19c>)
 8000480:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000482:	4a54      	ldr	r2, [pc, #336]	@ (80005d4 <MX_GPIO_Init+0x19c>)
 8000484:	f043 0301 	orr.w	r3, r3, #1
 8000488:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800048a:	4b52      	ldr	r3, [pc, #328]	@ (80005d4 <MX_GPIO_Init+0x19c>)
 800048c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800048e:	f003 0301 	and.w	r3, r3, #1
 8000492:	60bb      	str	r3, [r7, #8]
 8000494:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000496:	4b4f      	ldr	r3, [pc, #316]	@ (80005d4 <MX_GPIO_Init+0x19c>)
 8000498:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800049a:	4a4e      	ldr	r2, [pc, #312]	@ (80005d4 <MX_GPIO_Init+0x19c>)
 800049c:	f043 0302 	orr.w	r3, r3, #2
 80004a0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80004a2:	4b4c      	ldr	r3, [pc, #304]	@ (80005d4 <MX_GPIO_Init+0x19c>)
 80004a4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80004a6:	f003 0302 	and.w	r3, r3, #2
 80004aa:	607b      	str	r3, [r7, #4]
 80004ac:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|LD2_Pin, GPIO_PIN_RESET);
 80004ae:	2200      	movs	r2, #0
 80004b0:	2133      	movs	r1, #51	@ 0x33
 80004b2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80004b6:	f000 fe65 	bl	8001184 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10|GPIO_PIN_4|GPIO_PIN_5, GPIO_PIN_RESET);
 80004ba:	2200      	movs	r2, #0
 80004bc:	f44f 6186 	mov.w	r1, #1072	@ 0x430
 80004c0:	4845      	ldr	r0, [pc, #276]	@ (80005d8 <MX_GPIO_Init+0x1a0>)
 80004c2:	f000 fe5f 	bl	8001184 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80004c6:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80004ca:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80004cc:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80004d0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004d2:	2300      	movs	r3, #0
 80004d4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80004d6:	f107 0314 	add.w	r3, r7, #20
 80004da:	4619      	mov	r1, r3
 80004dc:	483f      	ldr	r0, [pc, #252]	@ (80005dc <MX_GPIO_Init+0x1a4>)
 80004de:	f000 fcb7 	bl	8000e50 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA1 PA4 LD2_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|LD2_Pin;
 80004e2:	2333      	movs	r3, #51	@ 0x33
 80004e4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80004e6:	2301      	movs	r3, #1
 80004e8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004ea:	2300      	movs	r3, #0
 80004ec:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80004ee:	2300      	movs	r3, #0
 80004f0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80004f2:	f107 0314 	add.w	r3, r7, #20
 80004f6:	4619      	mov	r1, r3
 80004f8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80004fc:	f000 fca8 	bl	8000e50 <HAL_GPIO_Init>

  /*Configure GPIO pins : LPUART1_TX_Pin LPUART1_RX_Pin */
  GPIO_InitStruct.Pin = LPUART1_TX_Pin|LPUART1_RX_Pin;
 8000500:	230c      	movs	r3, #12
 8000502:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000504:	2302      	movs	r3, #2
 8000506:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000508:	2300      	movs	r3, #0
 800050a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800050c:	2300      	movs	r3, #0
 800050e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF12_LPUART1;
 8000510:	230c      	movs	r3, #12
 8000512:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000514:	f107 0314 	add.w	r3, r7, #20
 8000518:	4619      	mov	r1, r3
 800051a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800051e:	f000 fc97 	bl	8000e50 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA7 PA9 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_9;
 8000522:	f44f 7320 	mov.w	r3, #640	@ 0x280
 8000526:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000528:	2300      	movs	r3, #0
 800052a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800052c:	2301      	movs	r3, #1
 800052e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000530:	f107 0314 	add.w	r3, r7, #20
 8000534:	4619      	mov	r1, r3
 8000536:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800053a:	f000 fc89 	bl	8000e50 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB10 PB4 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_4|GPIO_PIN_5;
 800053e:	f44f 6386 	mov.w	r3, #1072	@ 0x430
 8000542:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8000544:	2311      	movs	r3, #17
 8000546:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000548:	2300      	movs	r3, #0
 800054a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800054c:	2300      	movs	r3, #0
 800054e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000550:	f107 0314 	add.w	r3, r7, #20
 8000554:	4619      	mov	r1, r3
 8000556:	4820      	ldr	r0, [pc, #128]	@ (80005d8 <MX_GPIO_Init+0x1a0>)
 8000558:	f000 fc7a 	bl	8000e50 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 800055c:	2380      	movs	r3, #128	@ 0x80
 800055e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000560:	2300      	movs	r3, #0
 8000562:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000564:	2301      	movs	r3, #1
 8000566:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000568:	f107 0314 	add.w	r3, r7, #20
 800056c:	4619      	mov	r1, r3
 800056e:	481b      	ldr	r0, [pc, #108]	@ (80005dc <MX_GPIO_Init+0x1a4>)
 8000570:	f000 fc6e 	bl	8000e50 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000574:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000578:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800057a:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 800057e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000580:	2300      	movs	r3, #0
 8000582:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000584:	f107 0314 	add.w	r3, r7, #20
 8000588:	4619      	mov	r1, r3
 800058a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800058e:	f000 fc5f 	bl	8000e50 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000592:	2340      	movs	r3, #64	@ 0x40
 8000594:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000596:	2300      	movs	r3, #0
 8000598:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800059a:	2301      	movs	r3, #1
 800059c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800059e:	f107 0314 	add.w	r3, r7, #20
 80005a2:	4619      	mov	r1, r3
 80005a4:	480c      	ldr	r0, [pc, #48]	@ (80005d8 <MX_GPIO_Init+0x1a0>)
 80005a6:	f000 fc53 	bl	8000e50 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 80005aa:	2200      	movs	r2, #0
 80005ac:	2100      	movs	r1, #0
 80005ae:	2017      	movs	r0, #23
 80005b0:	f000 fc19 	bl	8000de6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80005b4:	2017      	movs	r0, #23
 80005b6:	f000 fc30 	bl	8000e1a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80005ba:	2200      	movs	r2, #0
 80005bc:	2100      	movs	r1, #0
 80005be:	2028      	movs	r0, #40	@ 0x28
 80005c0:	f000 fc11 	bl	8000de6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80005c4:	2028      	movs	r0, #40	@ 0x28
 80005c6:	f000 fc28 	bl	8000e1a <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 80005ca:	bf00      	nop
 80005cc:	3728      	adds	r7, #40	@ 0x28
 80005ce:	46bd      	mov	sp, r7
 80005d0:	bd80      	pop	{r7, pc}
 80005d2:	bf00      	nop
 80005d4:	40021000 	.word	0x40021000
 80005d8:	48000400 	.word	0x48000400
 80005dc:	48000800 	.word	0x48000800

080005e0 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 80005e0:	b580      	push	{r7, lr}
 80005e2:	b084      	sub	sp, #16
 80005e4:	af00      	add	r7, sp, #0
 80005e6:	4603      	mov	r3, r0
 80005e8:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == GPIO_PIN_13 || GPIO_Pin == GPIO_PIN_8) {
 80005ea:	88fb      	ldrh	r3, [r7, #6]
 80005ec:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80005f0:	d003      	beq.n	80005fa <HAL_GPIO_EXTI_Callback+0x1a>
 80005f2:	88fb      	ldrh	r3, [r7, #6]
 80005f4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80005f8:	d121      	bne.n	800063e <HAL_GPIO_EXTI_Callback+0x5e>
		HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 80005fa:	2120      	movs	r1, #32
 80005fc:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000600:	f000 fdd8 	bl	80011b4 <HAL_GPIO_TogglePin>
		for (int i = 0; i < 13; i++) {
 8000604:	2300      	movs	r3, #0
 8000606:	60fb      	str	r3, [r7, #12]
 8000608:	e007      	b.n	800061a <HAL_GPIO_EXTI_Callback+0x3a>
			pressedValues[i] = 0;
 800060a:	4a0f      	ldr	r2, [pc, #60]	@ (8000648 <HAL_GPIO_EXTI_Callback+0x68>)
 800060c:	68fb      	ldr	r3, [r7, #12]
 800060e:	2100      	movs	r1, #0
 8000610:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		for (int i = 0; i < 13; i++) {
 8000614:	68fb      	ldr	r3, [r7, #12]
 8000616:	3301      	adds	r3, #1
 8000618:	60fb      	str	r3, [r7, #12]
 800061a:	68fb      	ldr	r3, [r7, #12]
 800061c:	2b0c      	cmp	r3, #12
 800061e:	ddf4      	ble.n	800060a <HAL_GPIO_EXTI_Callback+0x2a>
		}
		inputCount = 0;
 8000620:	4b0a      	ldr	r3, [pc, #40]	@ (800064c <HAL_GPIO_EXTI_Callback+0x6c>)
 8000622:	2200      	movs	r2, #0
 8000624:	601a      	str	r2, [r3, #0]
		state_input = 0;
 8000626:	4b0a      	ldr	r3, [pc, #40]	@ (8000650 <HAL_GPIO_EXTI_Callback+0x70>)
 8000628:	2200      	movs	r2, #0
 800062a:	601a      	str	r2, [r3, #0]
		state_check = 0;
 800062c:	4b09      	ldr	r3, [pc, #36]	@ (8000654 <HAL_GPIO_EXTI_Callback+0x74>)
 800062e:	2200      	movs	r2, #0
 8000630:	601a      	str	r2, [r3, #0]
		correct_count = 0;
 8000632:	4b09      	ldr	r3, [pc, #36]	@ (8000658 <HAL_GPIO_EXTI_Callback+0x78>)
 8000634:	2200      	movs	r2, #0
 8000636:	601a      	str	r2, [r3, #0]
		wrong_count = 0;
 8000638:	4b08      	ldr	r3, [pc, #32]	@ (800065c <HAL_GPIO_EXTI_Callback+0x7c>)
 800063a:	2200      	movs	r2, #0
 800063c:	601a      	str	r2, [r3, #0]
//		getOutput(wrong_count);
//		getLed(States_input);

	}
}
 800063e:	bf00      	nop
 8000640:	3710      	adds	r7, #16
 8000642:	46bd      	mov	sp, r7
 8000644:	bd80      	pop	{r7, pc}
 8000646:	bf00      	nop
 8000648:	2000009c 	.word	0x2000009c
 800064c:	20000080 	.word	0x20000080
 8000650:	20000084 	.word	0x20000084
 8000654:	20000088 	.word	0x20000088
 8000658:	2000008c 	.word	0x2000008c
 800065c:	20000090 	.word	0x20000090

08000660 <ButtonMatrixRead>:

void ButtonMatrixRead() {
 8000660:	b580      	push	{r7, lr}
 8000662:	b082      	sub	sp, #8
 8000664:	af00      	add	r7, sp, #0
	static uint8_t X = 0;
	for (int i = 0; i < 4; i++) {
 8000666:	2300      	movs	r3, #0
 8000668:	607b      	str	r3, [r7, #4]
 800066a:	e037      	b.n	80006dc <ButtonMatrixRead+0x7c>
		if (HAL_GPIO_ReadPin(BMX_L[i].Port, BMX_L[i].Pin) == GPIO_PIN_RESET) {
 800066c:	4a36      	ldr	r2, [pc, #216]	@ (8000748 <ButtonMatrixRead+0xe8>)
 800066e:	687b      	ldr	r3, [r7, #4]
 8000670:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 8000674:	4934      	ldr	r1, [pc, #208]	@ (8000748 <ButtonMatrixRead+0xe8>)
 8000676:	687b      	ldr	r3, [r7, #4]
 8000678:	00db      	lsls	r3, r3, #3
 800067a:	440b      	add	r3, r1
 800067c:	889b      	ldrh	r3, [r3, #4]
 800067e:	4619      	mov	r1, r3
 8000680:	4610      	mov	r0, r2
 8000682:	f000 fd67 	bl	8001154 <HAL_GPIO_ReadPin>
 8000686:	4603      	mov	r3, r0
 8000688:	2b00      	cmp	r3, #0
 800068a:	d111      	bne.n	80006b0 <ButtonMatrixRead+0x50>
			ButtonState |= 1 << (i + (X * 4));
 800068c:	4b2f      	ldr	r3, [pc, #188]	@ (800074c <ButtonMatrixRead+0xec>)
 800068e:	781b      	ldrb	r3, [r3, #0]
 8000690:	009a      	lsls	r2, r3, #2
 8000692:	687b      	ldr	r3, [r7, #4]
 8000694:	4413      	add	r3, r2
 8000696:	2201      	movs	r2, #1
 8000698:	fa02 f303 	lsl.w	r3, r2, r3
 800069c:	b21a      	sxth	r2, r3
 800069e:	4b2c      	ldr	r3, [pc, #176]	@ (8000750 <ButtonMatrixRead+0xf0>)
 80006a0:	881b      	ldrh	r3, [r3, #0]
 80006a2:	b21b      	sxth	r3, r3
 80006a4:	4313      	orrs	r3, r2
 80006a6:	b21b      	sxth	r3, r3
 80006a8:	b29a      	uxth	r2, r3
 80006aa:	4b29      	ldr	r3, [pc, #164]	@ (8000750 <ButtonMatrixRead+0xf0>)
 80006ac:	801a      	strh	r2, [r3, #0]
 80006ae:	e012      	b.n	80006d6 <ButtonMatrixRead+0x76>
		} else {
			ButtonState &= ~(1 << (i + (X * 4)));
 80006b0:	4b26      	ldr	r3, [pc, #152]	@ (800074c <ButtonMatrixRead+0xec>)
 80006b2:	781b      	ldrb	r3, [r3, #0]
 80006b4:	009a      	lsls	r2, r3, #2
 80006b6:	687b      	ldr	r3, [r7, #4]
 80006b8:	4413      	add	r3, r2
 80006ba:	2201      	movs	r2, #1
 80006bc:	fa02 f303 	lsl.w	r3, r2, r3
 80006c0:	b21b      	sxth	r3, r3
 80006c2:	43db      	mvns	r3, r3
 80006c4:	b21a      	sxth	r2, r3
 80006c6:	4b22      	ldr	r3, [pc, #136]	@ (8000750 <ButtonMatrixRead+0xf0>)
 80006c8:	881b      	ldrh	r3, [r3, #0]
 80006ca:	b21b      	sxth	r3, r3
 80006cc:	4013      	ands	r3, r2
 80006ce:	b21b      	sxth	r3, r3
 80006d0:	b29a      	uxth	r2, r3
 80006d2:	4b1f      	ldr	r3, [pc, #124]	@ (8000750 <ButtonMatrixRead+0xf0>)
 80006d4:	801a      	strh	r2, [r3, #0]
	for (int i = 0; i < 4; i++) {
 80006d6:	687b      	ldr	r3, [r7, #4]
 80006d8:	3301      	adds	r3, #1
 80006da:	607b      	str	r3, [r7, #4]
 80006dc:	687b      	ldr	r3, [r7, #4]
 80006de:	2b03      	cmp	r3, #3
 80006e0:	ddc4      	ble.n	800066c <ButtonMatrixRead+0xc>
		}
	}

	HAL_GPIO_WritePin(BMX_R[X].Port, BMX_R[X].Pin, GPIO_PIN_SET);
 80006e2:	4b1a      	ldr	r3, [pc, #104]	@ (800074c <ButtonMatrixRead+0xec>)
 80006e4:	781b      	ldrb	r3, [r3, #0]
 80006e6:	461a      	mov	r2, r3
 80006e8:	4b1a      	ldr	r3, [pc, #104]	@ (8000754 <ButtonMatrixRead+0xf4>)
 80006ea:	f853 0032 	ldr.w	r0, [r3, r2, lsl #3]
 80006ee:	4b17      	ldr	r3, [pc, #92]	@ (800074c <ButtonMatrixRead+0xec>)
 80006f0:	781b      	ldrb	r3, [r3, #0]
 80006f2:	4a18      	ldr	r2, [pc, #96]	@ (8000754 <ButtonMatrixRead+0xf4>)
 80006f4:	00db      	lsls	r3, r3, #3
 80006f6:	4413      	add	r3, r2
 80006f8:	889b      	ldrh	r3, [r3, #4]
 80006fa:	2201      	movs	r2, #1
 80006fc:	4619      	mov	r1, r3
 80006fe:	f000 fd41 	bl	8001184 <HAL_GPIO_WritePin>

	uint8_t nextX = (X + 1) % 3;
 8000702:	4b12      	ldr	r3, [pc, #72]	@ (800074c <ButtonMatrixRead+0xec>)
 8000704:	781b      	ldrb	r3, [r3, #0]
 8000706:	1c5a      	adds	r2, r3, #1
 8000708:	4b13      	ldr	r3, [pc, #76]	@ (8000758 <ButtonMatrixRead+0xf8>)
 800070a:	fb83 3102 	smull	r3, r1, r3, r2
 800070e:	17d3      	asrs	r3, r2, #31
 8000710:	1ac9      	subs	r1, r1, r3
 8000712:	460b      	mov	r3, r1
 8000714:	005b      	lsls	r3, r3, #1
 8000716:	440b      	add	r3, r1
 8000718:	1ad1      	subs	r1, r2, r3
 800071a:	460b      	mov	r3, r1
 800071c:	70fb      	strb	r3, [r7, #3]
	HAL_GPIO_WritePin(BMX_R[nextX].Port, BMX_R[nextX].Pin, GPIO_PIN_RESET);
 800071e:	78fb      	ldrb	r3, [r7, #3]
 8000720:	4a0c      	ldr	r2, [pc, #48]	@ (8000754 <ButtonMatrixRead+0xf4>)
 8000722:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8000726:	78fb      	ldrb	r3, [r7, #3]
 8000728:	4a0a      	ldr	r2, [pc, #40]	@ (8000754 <ButtonMatrixRead+0xf4>)
 800072a:	00db      	lsls	r3, r3, #3
 800072c:	4413      	add	r3, r2
 800072e:	889b      	ldrh	r3, [r3, #4]
 8000730:	2200      	movs	r2, #0
 8000732:	4619      	mov	r1, r3
 8000734:	f000 fd26 	bl	8001184 <HAL_GPIO_WritePin>
	X = nextX;
 8000738:	4a04      	ldr	r2, [pc, #16]	@ (800074c <ButtonMatrixRead+0xec>)
 800073a:	78fb      	ldrb	r3, [r7, #3]
 800073c:	7013      	strb	r3, [r2, #0]
}
 800073e:	bf00      	nop
 8000740:	3708      	adds	r7, #8
 8000742:	46bd      	mov	sp, r7
 8000744:	bd80      	pop	{r7, pc}
 8000746:	bf00      	nop
 8000748:	20000000 	.word	0x20000000
 800074c:	200000b8 	.word	0x200000b8
 8000750:	2000007c 	.word	0x2000007c
 8000754:	20000020 	.word	0x20000020
 8000758:	55555556 	.word	0x55555556

0800075c <getButtonIndex>:

int getButtonIndex(uint16_t value) {
 800075c:	b480      	push	{r7}
 800075e:	b083      	sub	sp, #12
 8000760:	af00      	add	r7, sp, #0
 8000762:	4603      	mov	r3, r0
 8000764:	80fb      	strh	r3, [r7, #6]
	switch (value) {
 8000766:	88fb      	ldrh	r3, [r7, #6]
 8000768:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800076c:	d07b      	beq.n	8000866 <getButtonIndex+0x10a>
 800076e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8000772:	dc7a      	bgt.n	800086a <getButtonIndex+0x10e>
 8000774:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8000778:	d065      	beq.n	8000846 <getButtonIndex+0xea>
 800077a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800077e:	dc74      	bgt.n	800086a <getButtonIndex+0x10e>
 8000780:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8000784:	d065      	beq.n	8000852 <getButtonIndex+0xf6>
 8000786:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800078a:	dc6e      	bgt.n	800086a <getButtonIndex+0x10e>
 800078c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8000790:	d065      	beq.n	800085e <getButtonIndex+0x102>
 8000792:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8000796:	dc68      	bgt.n	800086a <getButtonIndex+0x10e>
 8000798:	2b80      	cmp	r3, #128	@ 0x80
 800079a:	d062      	beq.n	8000862 <getButtonIndex+0x106>
 800079c:	2b80      	cmp	r3, #128	@ 0x80
 800079e:	dc64      	bgt.n	800086a <getButtonIndex+0x10e>
 80007a0:	2b20      	cmp	r3, #32
 80007a2:	dc47      	bgt.n	8000834 <getButtonIndex+0xd8>
 80007a4:	2b00      	cmp	r3, #0
 80007a6:	dd60      	ble.n	800086a <getButtonIndex+0x10e>
 80007a8:	3b01      	subs	r3, #1
 80007aa:	2b1f      	cmp	r3, #31
 80007ac:	d85d      	bhi.n	800086a <getButtonIndex+0x10e>
 80007ae:	a201      	add	r2, pc, #4	@ (adr r2, 80007b4 <getButtonIndex+0x58>)
 80007b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80007b4:	08000857 	.word	0x08000857
 80007b8:	0800084b 	.word	0x0800084b
 80007bc:	0800086b 	.word	0x0800086b
 80007c0:	0800083f 	.word	0x0800083f
 80007c4:	0800086b 	.word	0x0800086b
 80007c8:	0800086b 	.word	0x0800086b
 80007cc:	0800086b 	.word	0x0800086b
 80007d0:	0800083b 	.word	0x0800083b
 80007d4:	0800086b 	.word	0x0800086b
 80007d8:	0800086b 	.word	0x0800086b
 80007dc:	0800086b 	.word	0x0800086b
 80007e0:	0800086b 	.word	0x0800086b
 80007e4:	0800086b 	.word	0x0800086b
 80007e8:	0800086b 	.word	0x0800086b
 80007ec:	0800086b 	.word	0x0800086b
 80007f0:	0800085b 	.word	0x0800085b
 80007f4:	0800086b 	.word	0x0800086b
 80007f8:	0800086b 	.word	0x0800086b
 80007fc:	0800086b 	.word	0x0800086b
 8000800:	0800086b 	.word	0x0800086b
 8000804:	0800086b 	.word	0x0800086b
 8000808:	0800086b 	.word	0x0800086b
 800080c:	0800086b 	.word	0x0800086b
 8000810:	0800086b 	.word	0x0800086b
 8000814:	0800086b 	.word	0x0800086b
 8000818:	0800086b 	.word	0x0800086b
 800081c:	0800086b 	.word	0x0800086b
 8000820:	0800086b 	.word	0x0800086b
 8000824:	0800086b 	.word	0x0800086b
 8000828:	0800086b 	.word	0x0800086b
 800082c:	0800086b 	.word	0x0800086b
 8000830:	0800084f 	.word	0x0800084f
 8000834:	2b40      	cmp	r3, #64	@ 0x40
 8000836:	d004      	beq.n	8000842 <getButtonIndex+0xe6>
 8000838:	e017      	b.n	800086a <getButtonIndex+0x10e>
	case 8:
		return 0;
 800083a:	2300      	movs	r3, #0
 800083c:	e016      	b.n	800086c <getButtonIndex+0x110>
	case 4:
		return 1;
 800083e:	2301      	movs	r3, #1
 8000840:	e014      	b.n	800086c <getButtonIndex+0x110>
	case 64:
		return 2;
 8000842:	2302      	movs	r3, #2
 8000844:	e012      	b.n	800086c <getButtonIndex+0x110>
	case 1024:
		return 3;
 8000846:	2303      	movs	r3, #3
 8000848:	e010      	b.n	800086c <getButtonIndex+0x110>
	case 2:
		return 4;
 800084a:	2304      	movs	r3, #4
 800084c:	e00e      	b.n	800086c <getButtonIndex+0x110>
	case 32:
		return 5;
 800084e:	2305      	movs	r3, #5
 8000850:	e00c      	b.n	800086c <getButtonIndex+0x110>
	case 512:
		return 6;
 8000852:	2306      	movs	r3, #6
 8000854:	e00a      	b.n	800086c <getButtonIndex+0x110>
	case 1:
		return 7;
 8000856:	2307      	movs	r3, #7
 8000858:	e008      	b.n	800086c <getButtonIndex+0x110>
	case 16:
		return 8;
 800085a:	2308      	movs	r3, #8
 800085c:	e006      	b.n	800086c <getButtonIndex+0x110>
	case 256:
		return 9;
 800085e:	2309      	movs	r3, #9
 8000860:	e004      	b.n	800086c <getButtonIndex+0x110>
	case 128:
		return 10;
 8000862:	230a      	movs	r3, #10
 8000864:	e002      	b.n	800086c <getButtonIndex+0x110>
	case 2048:
		return 11;
 8000866:	230b      	movs	r3, #11
 8000868:	e000      	b.n	800086c <getButtonIndex+0x110>
	default:
		return 12;
 800086a:	230c      	movs	r3, #12
	}
}
 800086c:	4618      	mov	r0, r3
 800086e:	370c      	adds	r7, #12
 8000870:	46bd      	mov	sp, r7
 8000872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000876:	4770      	bx	lr

08000878 <getOutput>:
void getOutput(int value) {
 8000878:	b580      	push	{r7, lr}
 800087a:	b082      	sub	sp, #8
 800087c:	af00      	add	r7, sp, #0
 800087e:	6078      	str	r0, [r7, #4]
	switch (value) {
 8000880:	687b      	ldr	r3, [r7, #4]
 8000882:	2b04      	cmp	r3, #4
 8000884:	d851      	bhi.n	800092a <getOutput+0xb2>
 8000886:	a201      	add	r2, pc, #4	@ (adr r2, 800088c <getOutput+0x14>)
 8000888:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800088c:	080008a1 	.word	0x080008a1
 8000890:	080008bb 	.word	0x080008bb
 8000894:	080008d5 	.word	0x080008d5
 8000898:	080008ef 	.word	0x080008ef
 800089c:	08000911 	.word	0x08000911
	case 0:
		States_input[0] = 1;
 80008a0:	4b26      	ldr	r3, [pc, #152]	@ (800093c <getOutput+0xc4>)
 80008a2:	2201      	movs	r2, #1
 80008a4:	801a      	strh	r2, [r3, #0]
		States_input[1] = 1;
 80008a6:	4b25      	ldr	r3, [pc, #148]	@ (800093c <getOutput+0xc4>)
 80008a8:	2201      	movs	r2, #1
 80008aa:	805a      	strh	r2, [r3, #2]
		States_input[2] = 1;
 80008ac:	4b23      	ldr	r3, [pc, #140]	@ (800093c <getOutput+0xc4>)
 80008ae:	2201      	movs	r2, #1
 80008b0:	809a      	strh	r2, [r3, #4]
		States_input[3] = 1;
 80008b2:	4b22      	ldr	r3, [pc, #136]	@ (800093c <getOutput+0xc4>)
 80008b4:	2201      	movs	r2, #1
 80008b6:	80da      	strh	r2, [r3, #6]
		break;
 80008b8:	e038      	b.n	800092c <getOutput+0xb4>
	case 1:
		States_input[0] = 1;
 80008ba:	4b20      	ldr	r3, [pc, #128]	@ (800093c <getOutput+0xc4>)
 80008bc:	2201      	movs	r2, #1
 80008be:	801a      	strh	r2, [r3, #0]
		States_input[1] = 0;
 80008c0:	4b1e      	ldr	r3, [pc, #120]	@ (800093c <getOutput+0xc4>)
 80008c2:	2200      	movs	r2, #0
 80008c4:	805a      	strh	r2, [r3, #2]
		States_input[2] = 1;
 80008c6:	4b1d      	ldr	r3, [pc, #116]	@ (800093c <getOutput+0xc4>)
 80008c8:	2201      	movs	r2, #1
 80008ca:	809a      	strh	r2, [r3, #4]
		States_input[3] = 1;
 80008cc:	4b1b      	ldr	r3, [pc, #108]	@ (800093c <getOutput+0xc4>)
 80008ce:	2201      	movs	r2, #1
 80008d0:	80da      	strh	r2, [r3, #6]
		break;
 80008d2:	e02b      	b.n	800092c <getOutput+0xb4>
	case 2:
		States_input[0] = 1;
 80008d4:	4b19      	ldr	r3, [pc, #100]	@ (800093c <getOutput+0xc4>)
 80008d6:	2201      	movs	r2, #1
 80008d8:	801a      	strh	r2, [r3, #0]
		States_input[1] = 0;
 80008da:	4b18      	ldr	r3, [pc, #96]	@ (800093c <getOutput+0xc4>)
 80008dc:	2200      	movs	r2, #0
 80008de:	805a      	strh	r2, [r3, #2]
		States_input[2] = 0;
 80008e0:	4b16      	ldr	r3, [pc, #88]	@ (800093c <getOutput+0xc4>)
 80008e2:	2200      	movs	r2, #0
 80008e4:	809a      	strh	r2, [r3, #4]
		States_input[3] = 1;
 80008e6:	4b15      	ldr	r3, [pc, #84]	@ (800093c <getOutput+0xc4>)
 80008e8:	2201      	movs	r2, #1
 80008ea:	80da      	strh	r2, [r3, #6]
		break;
 80008ec:	e01e      	b.n	800092c <getOutput+0xb4>
	case 3:
		States_input[0] = 1;
 80008ee:	4b13      	ldr	r3, [pc, #76]	@ (800093c <getOutput+0xc4>)
 80008f0:	2201      	movs	r2, #1
 80008f2:	801a      	strh	r2, [r3, #0]
		States_input[1] = 0;
 80008f4:	4b11      	ldr	r3, [pc, #68]	@ (800093c <getOutput+0xc4>)
 80008f6:	2200      	movs	r2, #0
 80008f8:	805a      	strh	r2, [r3, #2]
		States_input[2] = 0;
 80008fa:	4b10      	ldr	r3, [pc, #64]	@ (800093c <getOutput+0xc4>)
 80008fc:	2200      	movs	r2, #0
 80008fe:	809a      	strh	r2, [r3, #4]
		States_input[3] = 0;
 8000900:	4b0e      	ldr	r3, [pc, #56]	@ (800093c <getOutput+0xc4>)
 8000902:	2200      	movs	r2, #0
 8000904:	80da      	strh	r2, [r3, #6]
		getLed(States_input);
 8000906:	480d      	ldr	r0, [pc, #52]	@ (800093c <getOutput+0xc4>)
 8000908:	f000 f81a 	bl	8000940 <getLed>
		while (1) {
 800090c:	bf00      	nop
 800090e:	e7fd      	b.n	800090c <getOutput+0x94>
		}
		break;
	case 4:
		States_input[0] = 0;
 8000910:	4b0a      	ldr	r3, [pc, #40]	@ (800093c <getOutput+0xc4>)
 8000912:	2200      	movs	r2, #0
 8000914:	801a      	strh	r2, [r3, #0]
		States_input[1] = 1;
 8000916:	4b09      	ldr	r3, [pc, #36]	@ (800093c <getOutput+0xc4>)
 8000918:	2201      	movs	r2, #1
 800091a:	805a      	strh	r2, [r3, #2]
		States_input[2] = 1;
 800091c:	4b07      	ldr	r3, [pc, #28]	@ (800093c <getOutput+0xc4>)
 800091e:	2201      	movs	r2, #1
 8000920:	809a      	strh	r2, [r3, #4]
		States_input[3] = 1;
 8000922:	4b06      	ldr	r3, [pc, #24]	@ (800093c <getOutput+0xc4>)
 8000924:	2201      	movs	r2, #1
 8000926:	80da      	strh	r2, [r3, #6]
		break;
 8000928:	e000      	b.n	800092c <getOutput+0xb4>
	default:
		break;
 800092a:	bf00      	nop
	}
	getLed(States_input);
 800092c:	4803      	ldr	r0, [pc, #12]	@ (800093c <getOutput+0xc4>)
 800092e:	f000 f807 	bl	8000940 <getLed>
}
 8000932:	bf00      	nop
 8000934:	3708      	adds	r7, #8
 8000936:	46bd      	mov	sp, r7
 8000938:	bd80      	pop	{r7, pc}
 800093a:	bf00      	nop
 800093c:	20000094 	.word	0x20000094

08000940 <getLed>:

void getLed(uint16_t States_input[4]) {
 8000940:	b580      	push	{r7, lr}
 8000942:	b084      	sub	sp, #16
 8000944:	af00      	add	r7, sp, #0
 8000946:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 0);
 8000948:	2200      	movs	r2, #0
 800094a:	2110      	movs	r1, #16
 800094c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000950:	f000 fc18 	bl	8001184 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 8000954:	2064      	movs	r0, #100	@ 0x64
 8000956:	f000 f949 	bl	8000bec <HAL_Delay>
	for (int i = 0; i < 4; i++) {
 800095a:	2300      	movs	r3, #0
 800095c:	60fb      	str	r3, [r7, #12]
 800095e:	e01f      	b.n	80009a0 <getLed+0x60>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, 0);
 8000960:	2200      	movs	r2, #0
 8000962:	2102      	movs	r1, #2
 8000964:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000968:	f000 fc0c 	bl	8001184 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, States_input[i]);
 800096c:	68fb      	ldr	r3, [r7, #12]
 800096e:	005b      	lsls	r3, r3, #1
 8000970:	687a      	ldr	r2, [r7, #4]
 8000972:	4413      	add	r3, r2
 8000974:	881b      	ldrh	r3, [r3, #0]
 8000976:	b2db      	uxtb	r3, r3
 8000978:	461a      	mov	r2, r3
 800097a:	2101      	movs	r1, #1
 800097c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000980:	f000 fc00 	bl	8001184 <HAL_GPIO_WritePin>
		HAL_Delay(100);
 8000984:	2064      	movs	r0, #100	@ 0x64
 8000986:	f000 f931 	bl	8000bec <HAL_Delay>
		HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_1);
 800098a:	2102      	movs	r1, #2
 800098c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000990:	f000 fc10 	bl	80011b4 <HAL_GPIO_TogglePin>
		HAL_Delay(100);
 8000994:	2064      	movs	r0, #100	@ 0x64
 8000996:	f000 f929 	bl	8000bec <HAL_Delay>
	for (int i = 0; i < 4; i++) {
 800099a:	68fb      	ldr	r3, [r7, #12]
 800099c:	3301      	adds	r3, #1
 800099e:	60fb      	str	r3, [r7, #12]
 80009a0:	68fb      	ldr	r3, [r7, #12]
 80009a2:	2b03      	cmp	r3, #3
 80009a4:	dddc      	ble.n	8000960 <getLed+0x20>
	}
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 1);
 80009a6:	2201      	movs	r2, #1
 80009a8:	2110      	movs	r1, #16
 80009aa:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80009ae:	f000 fbe9 	bl	8001184 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 80009b2:	2064      	movs	r0, #100	@ 0x64
 80009b4:	f000 f91a 	bl	8000bec <HAL_Delay>
}
 80009b8:	bf00      	nop
 80009ba:	3710      	adds	r7, #16
 80009bc:	46bd      	mov	sp, r7
 80009be:	bd80      	pop	{r7, pc}

080009c0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80009c0:	b480      	push	{r7}
 80009c2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80009c4:	b672      	cpsid	i
}
 80009c6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 80009c8:	bf00      	nop
 80009ca:	e7fd      	b.n	80009c8 <Error_Handler+0x8>

080009cc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80009cc:	b580      	push	{r7, lr}
 80009ce:	b082      	sub	sp, #8
 80009d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009d2:	4b0f      	ldr	r3, [pc, #60]	@ (8000a10 <HAL_MspInit+0x44>)
 80009d4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80009d6:	4a0e      	ldr	r2, [pc, #56]	@ (8000a10 <HAL_MspInit+0x44>)
 80009d8:	f043 0301 	orr.w	r3, r3, #1
 80009dc:	6613      	str	r3, [r2, #96]	@ 0x60
 80009de:	4b0c      	ldr	r3, [pc, #48]	@ (8000a10 <HAL_MspInit+0x44>)
 80009e0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80009e2:	f003 0301 	and.w	r3, r3, #1
 80009e6:	607b      	str	r3, [r7, #4]
 80009e8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80009ea:	4b09      	ldr	r3, [pc, #36]	@ (8000a10 <HAL_MspInit+0x44>)
 80009ec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80009ee:	4a08      	ldr	r2, [pc, #32]	@ (8000a10 <HAL_MspInit+0x44>)
 80009f0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80009f4:	6593      	str	r3, [r2, #88]	@ 0x58
 80009f6:	4b06      	ldr	r3, [pc, #24]	@ (8000a10 <HAL_MspInit+0x44>)
 80009f8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80009fa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80009fe:	603b      	str	r3, [r7, #0]
 8000a00:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8000a02:	f000 fcad 	bl	8001360 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a06:	bf00      	nop
 8000a08:	3708      	adds	r7, #8
 8000a0a:	46bd      	mov	sp, r7
 8000a0c:	bd80      	pop	{r7, pc}
 8000a0e:	bf00      	nop
 8000a10:	40021000 	.word	0x40021000

08000a14 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a14:	b480      	push	{r7}
 8000a16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000a18:	bf00      	nop
 8000a1a:	e7fd      	b.n	8000a18 <NMI_Handler+0x4>

08000a1c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a1c:	b480      	push	{r7}
 8000a1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a20:	bf00      	nop
 8000a22:	e7fd      	b.n	8000a20 <HardFault_Handler+0x4>

08000a24 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a24:	b480      	push	{r7}
 8000a26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a28:	bf00      	nop
 8000a2a:	e7fd      	b.n	8000a28 <MemManage_Handler+0x4>

08000a2c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a2c:	b480      	push	{r7}
 8000a2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a30:	bf00      	nop
 8000a32:	e7fd      	b.n	8000a30 <BusFault_Handler+0x4>

08000a34 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a34:	b480      	push	{r7}
 8000a36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a38:	bf00      	nop
 8000a3a:	e7fd      	b.n	8000a38 <UsageFault_Handler+0x4>

08000a3c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a3c:	b480      	push	{r7}
 8000a3e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000a40:	bf00      	nop
 8000a42:	46bd      	mov	sp, r7
 8000a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a48:	4770      	bx	lr

08000a4a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a4a:	b480      	push	{r7}
 8000a4c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a4e:	bf00      	nop
 8000a50:	46bd      	mov	sp, r7
 8000a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a56:	4770      	bx	lr

08000a58 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a58:	b480      	push	{r7}
 8000a5a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a5c:	bf00      	nop
 8000a5e:	46bd      	mov	sp, r7
 8000a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a64:	4770      	bx	lr

08000a66 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a66:	b580      	push	{r7, lr}
 8000a68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a6a:	f000 f8a1 	bl	8000bb0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a6e:	bf00      	nop
 8000a70:	bd80      	pop	{r7, pc}

08000a72 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8000a72:	b580      	push	{r7, lr}
 8000a74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 8000a76:	f44f 7080 	mov.w	r0, #256	@ 0x100
 8000a7a:	f000 fbb5 	bl	80011e8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8000a7e:	bf00      	nop
 8000a80:	bd80      	pop	{r7, pc}

08000a82 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000a82:	b580      	push	{r7, lr}
 8000a84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8000a86:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8000a8a:	f000 fbad 	bl	80011e8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000a8e:	bf00      	nop
 8000a90:	bd80      	pop	{r7, pc}
	...

08000a94 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000a94:	b480      	push	{r7}
 8000a96:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000a98:	4b06      	ldr	r3, [pc, #24]	@ (8000ab4 <SystemInit+0x20>)
 8000a9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000a9e:	4a05      	ldr	r2, [pc, #20]	@ (8000ab4 <SystemInit+0x20>)
 8000aa0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000aa4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000aa8:	bf00      	nop
 8000aaa:	46bd      	mov	sp, r7
 8000aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab0:	4770      	bx	lr
 8000ab2:	bf00      	nop
 8000ab4:	e000ed00 	.word	0xe000ed00

08000ab8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000ab8:	480d      	ldr	r0, [pc, #52]	@ (8000af0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000aba:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000abc:	f7ff ffea 	bl	8000a94 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000ac0:	480c      	ldr	r0, [pc, #48]	@ (8000af4 <LoopForever+0x6>)
  ldr r1, =_edata
 8000ac2:	490d      	ldr	r1, [pc, #52]	@ (8000af8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000ac4:	4a0d      	ldr	r2, [pc, #52]	@ (8000afc <LoopForever+0xe>)
  movs r3, #0
 8000ac6:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8000ac8:	e002      	b.n	8000ad0 <LoopCopyDataInit>

08000aca <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000aca:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000acc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000ace:	3304      	adds	r3, #4

08000ad0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ad0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000ad2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ad4:	d3f9      	bcc.n	8000aca <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000ad6:	4a0a      	ldr	r2, [pc, #40]	@ (8000b00 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000ad8:	4c0a      	ldr	r4, [pc, #40]	@ (8000b04 <LoopForever+0x16>)
  movs r3, #0
 8000ada:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000adc:	e001      	b.n	8000ae2 <LoopFillZerobss>

08000ade <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000ade:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ae0:	3204      	adds	r2, #4

08000ae2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000ae2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ae4:	d3fb      	bcc.n	8000ade <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000ae6:	f001 f949 	bl	8001d7c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000aea:	f7ff fb95 	bl	8000218 <main>

08000aee <LoopForever>:

LoopForever:
    b LoopForever
 8000aee:	e7fe      	b.n	8000aee <LoopForever>
  ldr   r0, =_estack
 8000af0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000af4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000af8:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 8000afc:	08001df4 	.word	0x08001df4
  ldr r2, =_sbss
 8000b00:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 8000b04:	200000c0 	.word	0x200000c0

08000b08 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000b08:	e7fe      	b.n	8000b08 <ADC1_2_IRQHandler>

08000b0a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b0a:	b580      	push	{r7, lr}
 8000b0c:	b082      	sub	sp, #8
 8000b0e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000b10:	2300      	movs	r3, #0
 8000b12:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b14:	2003      	movs	r0, #3
 8000b16:	f000 f95b 	bl	8000dd0 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000b1a:	2000      	movs	r0, #0
 8000b1c:	f000 f80e 	bl	8000b3c <HAL_InitTick>
 8000b20:	4603      	mov	r3, r0
 8000b22:	2b00      	cmp	r3, #0
 8000b24:	d002      	beq.n	8000b2c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000b26:	2301      	movs	r3, #1
 8000b28:	71fb      	strb	r3, [r7, #7]
 8000b2a:	e001      	b.n	8000b30 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000b2c:	f7ff ff4e 	bl	80009cc <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000b30:	79fb      	ldrb	r3, [r7, #7]

}
 8000b32:	4618      	mov	r0, r3
 8000b34:	3708      	adds	r7, #8
 8000b36:	46bd      	mov	sp, r7
 8000b38:	bd80      	pop	{r7, pc}
	...

08000b3c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b3c:	b580      	push	{r7, lr}
 8000b3e:	b084      	sub	sp, #16
 8000b40:	af00      	add	r7, sp, #0
 8000b42:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000b44:	2300      	movs	r3, #0
 8000b46:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8000b48:	4b16      	ldr	r3, [pc, #88]	@ (8000ba4 <HAL_InitTick+0x68>)
 8000b4a:	681b      	ldr	r3, [r3, #0]
 8000b4c:	2b00      	cmp	r3, #0
 8000b4e:	d022      	beq.n	8000b96 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8000b50:	4b15      	ldr	r3, [pc, #84]	@ (8000ba8 <HAL_InitTick+0x6c>)
 8000b52:	681a      	ldr	r2, [r3, #0]
 8000b54:	4b13      	ldr	r3, [pc, #76]	@ (8000ba4 <HAL_InitTick+0x68>)
 8000b56:	681b      	ldr	r3, [r3, #0]
 8000b58:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8000b5c:	fbb1 f3f3 	udiv	r3, r1, r3
 8000b60:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b64:	4618      	mov	r0, r3
 8000b66:	f000 f966 	bl	8000e36 <HAL_SYSTICK_Config>
 8000b6a:	4603      	mov	r3, r0
 8000b6c:	2b00      	cmp	r3, #0
 8000b6e:	d10f      	bne.n	8000b90 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b70:	687b      	ldr	r3, [r7, #4]
 8000b72:	2b0f      	cmp	r3, #15
 8000b74:	d809      	bhi.n	8000b8a <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000b76:	2200      	movs	r2, #0
 8000b78:	6879      	ldr	r1, [r7, #4]
 8000b7a:	f04f 30ff 	mov.w	r0, #4294967295
 8000b7e:	f000 f932 	bl	8000de6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000b82:	4a0a      	ldr	r2, [pc, #40]	@ (8000bac <HAL_InitTick+0x70>)
 8000b84:	687b      	ldr	r3, [r7, #4]
 8000b86:	6013      	str	r3, [r2, #0]
 8000b88:	e007      	b.n	8000b9a <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8000b8a:	2301      	movs	r3, #1
 8000b8c:	73fb      	strb	r3, [r7, #15]
 8000b8e:	e004      	b.n	8000b9a <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000b90:	2301      	movs	r3, #1
 8000b92:	73fb      	strb	r3, [r7, #15]
 8000b94:	e001      	b.n	8000b9a <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000b96:	2301      	movs	r3, #1
 8000b98:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000b9a:	7bfb      	ldrb	r3, [r7, #15]
}
 8000b9c:	4618      	mov	r0, r3
 8000b9e:	3710      	adds	r7, #16
 8000ba0:	46bd      	mov	sp, r7
 8000ba2:	bd80      	pop	{r7, pc}
 8000ba4:	2000005c 	.word	0x2000005c
 8000ba8:	20000054 	.word	0x20000054
 8000bac:	20000058 	.word	0x20000058

08000bb0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000bb0:	b480      	push	{r7}
 8000bb2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000bb4:	4b05      	ldr	r3, [pc, #20]	@ (8000bcc <HAL_IncTick+0x1c>)
 8000bb6:	681a      	ldr	r2, [r3, #0]
 8000bb8:	4b05      	ldr	r3, [pc, #20]	@ (8000bd0 <HAL_IncTick+0x20>)
 8000bba:	681b      	ldr	r3, [r3, #0]
 8000bbc:	4413      	add	r3, r2
 8000bbe:	4a03      	ldr	r2, [pc, #12]	@ (8000bcc <HAL_IncTick+0x1c>)
 8000bc0:	6013      	str	r3, [r2, #0]
}
 8000bc2:	bf00      	nop
 8000bc4:	46bd      	mov	sp, r7
 8000bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bca:	4770      	bx	lr
 8000bcc:	200000bc 	.word	0x200000bc
 8000bd0:	2000005c 	.word	0x2000005c

08000bd4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000bd4:	b480      	push	{r7}
 8000bd6:	af00      	add	r7, sp, #0
  return uwTick;
 8000bd8:	4b03      	ldr	r3, [pc, #12]	@ (8000be8 <HAL_GetTick+0x14>)
 8000bda:	681b      	ldr	r3, [r3, #0]
}
 8000bdc:	4618      	mov	r0, r3
 8000bde:	46bd      	mov	sp, r7
 8000be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop
 8000be8:	200000bc 	.word	0x200000bc

08000bec <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000bec:	b580      	push	{r7, lr}
 8000bee:	b084      	sub	sp, #16
 8000bf0:	af00      	add	r7, sp, #0
 8000bf2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000bf4:	f7ff ffee 	bl	8000bd4 <HAL_GetTick>
 8000bf8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000bfa:	687b      	ldr	r3, [r7, #4]
 8000bfc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000bfe:	68fb      	ldr	r3, [r7, #12]
 8000c00:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000c04:	d004      	beq.n	8000c10 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8000c06:	4b09      	ldr	r3, [pc, #36]	@ (8000c2c <HAL_Delay+0x40>)
 8000c08:	681b      	ldr	r3, [r3, #0]
 8000c0a:	68fa      	ldr	r2, [r7, #12]
 8000c0c:	4413      	add	r3, r2
 8000c0e:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000c10:	bf00      	nop
 8000c12:	f7ff ffdf 	bl	8000bd4 <HAL_GetTick>
 8000c16:	4602      	mov	r2, r0
 8000c18:	68bb      	ldr	r3, [r7, #8]
 8000c1a:	1ad3      	subs	r3, r2, r3
 8000c1c:	68fa      	ldr	r2, [r7, #12]
 8000c1e:	429a      	cmp	r2, r3
 8000c20:	d8f7      	bhi.n	8000c12 <HAL_Delay+0x26>
  {
  }
}
 8000c22:	bf00      	nop
 8000c24:	bf00      	nop
 8000c26:	3710      	adds	r7, #16
 8000c28:	46bd      	mov	sp, r7
 8000c2a:	bd80      	pop	{r7, pc}
 8000c2c:	2000005c 	.word	0x2000005c

08000c30 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c30:	b480      	push	{r7}
 8000c32:	b085      	sub	sp, #20
 8000c34:	af00      	add	r7, sp, #0
 8000c36:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	f003 0307 	and.w	r3, r3, #7
 8000c3e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c40:	4b0c      	ldr	r3, [pc, #48]	@ (8000c74 <__NVIC_SetPriorityGrouping+0x44>)
 8000c42:	68db      	ldr	r3, [r3, #12]
 8000c44:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c46:	68ba      	ldr	r2, [r7, #8]
 8000c48:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000c4c:	4013      	ands	r3, r2
 8000c4e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000c50:	68fb      	ldr	r3, [r7, #12]
 8000c52:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000c54:	68bb      	ldr	r3, [r7, #8]
 8000c56:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000c58:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000c5c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000c60:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000c62:	4a04      	ldr	r2, [pc, #16]	@ (8000c74 <__NVIC_SetPriorityGrouping+0x44>)
 8000c64:	68bb      	ldr	r3, [r7, #8]
 8000c66:	60d3      	str	r3, [r2, #12]
}
 8000c68:	bf00      	nop
 8000c6a:	3714      	adds	r7, #20
 8000c6c:	46bd      	mov	sp, r7
 8000c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c72:	4770      	bx	lr
 8000c74:	e000ed00 	.word	0xe000ed00

08000c78 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000c78:	b480      	push	{r7}
 8000c7a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000c7c:	4b04      	ldr	r3, [pc, #16]	@ (8000c90 <__NVIC_GetPriorityGrouping+0x18>)
 8000c7e:	68db      	ldr	r3, [r3, #12]
 8000c80:	0a1b      	lsrs	r3, r3, #8
 8000c82:	f003 0307 	and.w	r3, r3, #7
}
 8000c86:	4618      	mov	r0, r3
 8000c88:	46bd      	mov	sp, r7
 8000c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c8e:	4770      	bx	lr
 8000c90:	e000ed00 	.word	0xe000ed00

08000c94 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c94:	b480      	push	{r7}
 8000c96:	b083      	sub	sp, #12
 8000c98:	af00      	add	r7, sp, #0
 8000c9a:	4603      	mov	r3, r0
 8000c9c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ca2:	2b00      	cmp	r3, #0
 8000ca4:	db0b      	blt.n	8000cbe <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000ca6:	79fb      	ldrb	r3, [r7, #7]
 8000ca8:	f003 021f 	and.w	r2, r3, #31
 8000cac:	4907      	ldr	r1, [pc, #28]	@ (8000ccc <__NVIC_EnableIRQ+0x38>)
 8000cae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cb2:	095b      	lsrs	r3, r3, #5
 8000cb4:	2001      	movs	r0, #1
 8000cb6:	fa00 f202 	lsl.w	r2, r0, r2
 8000cba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000cbe:	bf00      	nop
 8000cc0:	370c      	adds	r7, #12
 8000cc2:	46bd      	mov	sp, r7
 8000cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc8:	4770      	bx	lr
 8000cca:	bf00      	nop
 8000ccc:	e000e100 	.word	0xe000e100

08000cd0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000cd0:	b480      	push	{r7}
 8000cd2:	b083      	sub	sp, #12
 8000cd4:	af00      	add	r7, sp, #0
 8000cd6:	4603      	mov	r3, r0
 8000cd8:	6039      	str	r1, [r7, #0]
 8000cda:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000cdc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ce0:	2b00      	cmp	r3, #0
 8000ce2:	db0a      	blt.n	8000cfa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ce4:	683b      	ldr	r3, [r7, #0]
 8000ce6:	b2da      	uxtb	r2, r3
 8000ce8:	490c      	ldr	r1, [pc, #48]	@ (8000d1c <__NVIC_SetPriority+0x4c>)
 8000cea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cee:	0112      	lsls	r2, r2, #4
 8000cf0:	b2d2      	uxtb	r2, r2
 8000cf2:	440b      	add	r3, r1
 8000cf4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000cf8:	e00a      	b.n	8000d10 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cfa:	683b      	ldr	r3, [r7, #0]
 8000cfc:	b2da      	uxtb	r2, r3
 8000cfe:	4908      	ldr	r1, [pc, #32]	@ (8000d20 <__NVIC_SetPriority+0x50>)
 8000d00:	79fb      	ldrb	r3, [r7, #7]
 8000d02:	f003 030f 	and.w	r3, r3, #15
 8000d06:	3b04      	subs	r3, #4
 8000d08:	0112      	lsls	r2, r2, #4
 8000d0a:	b2d2      	uxtb	r2, r2
 8000d0c:	440b      	add	r3, r1
 8000d0e:	761a      	strb	r2, [r3, #24]
}
 8000d10:	bf00      	nop
 8000d12:	370c      	adds	r7, #12
 8000d14:	46bd      	mov	sp, r7
 8000d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d1a:	4770      	bx	lr
 8000d1c:	e000e100 	.word	0xe000e100
 8000d20:	e000ed00 	.word	0xe000ed00

08000d24 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d24:	b480      	push	{r7}
 8000d26:	b089      	sub	sp, #36	@ 0x24
 8000d28:	af00      	add	r7, sp, #0
 8000d2a:	60f8      	str	r0, [r7, #12]
 8000d2c:	60b9      	str	r1, [r7, #8]
 8000d2e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000d30:	68fb      	ldr	r3, [r7, #12]
 8000d32:	f003 0307 	and.w	r3, r3, #7
 8000d36:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d38:	69fb      	ldr	r3, [r7, #28]
 8000d3a:	f1c3 0307 	rsb	r3, r3, #7
 8000d3e:	2b04      	cmp	r3, #4
 8000d40:	bf28      	it	cs
 8000d42:	2304      	movcs	r3, #4
 8000d44:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d46:	69fb      	ldr	r3, [r7, #28]
 8000d48:	3304      	adds	r3, #4
 8000d4a:	2b06      	cmp	r3, #6
 8000d4c:	d902      	bls.n	8000d54 <NVIC_EncodePriority+0x30>
 8000d4e:	69fb      	ldr	r3, [r7, #28]
 8000d50:	3b03      	subs	r3, #3
 8000d52:	e000      	b.n	8000d56 <NVIC_EncodePriority+0x32>
 8000d54:	2300      	movs	r3, #0
 8000d56:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d58:	f04f 32ff 	mov.w	r2, #4294967295
 8000d5c:	69bb      	ldr	r3, [r7, #24]
 8000d5e:	fa02 f303 	lsl.w	r3, r2, r3
 8000d62:	43da      	mvns	r2, r3
 8000d64:	68bb      	ldr	r3, [r7, #8]
 8000d66:	401a      	ands	r2, r3
 8000d68:	697b      	ldr	r3, [r7, #20]
 8000d6a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000d6c:	f04f 31ff 	mov.w	r1, #4294967295
 8000d70:	697b      	ldr	r3, [r7, #20]
 8000d72:	fa01 f303 	lsl.w	r3, r1, r3
 8000d76:	43d9      	mvns	r1, r3
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d7c:	4313      	orrs	r3, r2
         );
}
 8000d7e:	4618      	mov	r0, r3
 8000d80:	3724      	adds	r7, #36	@ 0x24
 8000d82:	46bd      	mov	sp, r7
 8000d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d88:	4770      	bx	lr
	...

08000d8c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000d8c:	b580      	push	{r7, lr}
 8000d8e:	b082      	sub	sp, #8
 8000d90:	af00      	add	r7, sp, #0
 8000d92:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	3b01      	subs	r3, #1
 8000d98:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000d9c:	d301      	bcc.n	8000da2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000d9e:	2301      	movs	r3, #1
 8000da0:	e00f      	b.n	8000dc2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000da2:	4a0a      	ldr	r2, [pc, #40]	@ (8000dcc <SysTick_Config+0x40>)
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	3b01      	subs	r3, #1
 8000da8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000daa:	210f      	movs	r1, #15
 8000dac:	f04f 30ff 	mov.w	r0, #4294967295
 8000db0:	f7ff ff8e 	bl	8000cd0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000db4:	4b05      	ldr	r3, [pc, #20]	@ (8000dcc <SysTick_Config+0x40>)
 8000db6:	2200      	movs	r2, #0
 8000db8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000dba:	4b04      	ldr	r3, [pc, #16]	@ (8000dcc <SysTick_Config+0x40>)
 8000dbc:	2207      	movs	r2, #7
 8000dbe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000dc0:	2300      	movs	r3, #0
}
 8000dc2:	4618      	mov	r0, r3
 8000dc4:	3708      	adds	r7, #8
 8000dc6:	46bd      	mov	sp, r7
 8000dc8:	bd80      	pop	{r7, pc}
 8000dca:	bf00      	nop
 8000dcc:	e000e010 	.word	0xe000e010

08000dd0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000dd0:	b580      	push	{r7, lr}
 8000dd2:	b082      	sub	sp, #8
 8000dd4:	af00      	add	r7, sp, #0
 8000dd6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000dd8:	6878      	ldr	r0, [r7, #4]
 8000dda:	f7ff ff29 	bl	8000c30 <__NVIC_SetPriorityGrouping>
}
 8000dde:	bf00      	nop
 8000de0:	3708      	adds	r7, #8
 8000de2:	46bd      	mov	sp, r7
 8000de4:	bd80      	pop	{r7, pc}

08000de6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000de6:	b580      	push	{r7, lr}
 8000de8:	b086      	sub	sp, #24
 8000dea:	af00      	add	r7, sp, #0
 8000dec:	4603      	mov	r3, r0
 8000dee:	60b9      	str	r1, [r7, #8]
 8000df0:	607a      	str	r2, [r7, #4]
 8000df2:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000df4:	f7ff ff40 	bl	8000c78 <__NVIC_GetPriorityGrouping>
 8000df8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000dfa:	687a      	ldr	r2, [r7, #4]
 8000dfc:	68b9      	ldr	r1, [r7, #8]
 8000dfe:	6978      	ldr	r0, [r7, #20]
 8000e00:	f7ff ff90 	bl	8000d24 <NVIC_EncodePriority>
 8000e04:	4602      	mov	r2, r0
 8000e06:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e0a:	4611      	mov	r1, r2
 8000e0c:	4618      	mov	r0, r3
 8000e0e:	f7ff ff5f 	bl	8000cd0 <__NVIC_SetPriority>
}
 8000e12:	bf00      	nop
 8000e14:	3718      	adds	r7, #24
 8000e16:	46bd      	mov	sp, r7
 8000e18:	bd80      	pop	{r7, pc}

08000e1a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e1a:	b580      	push	{r7, lr}
 8000e1c:	b082      	sub	sp, #8
 8000e1e:	af00      	add	r7, sp, #0
 8000e20:	4603      	mov	r3, r0
 8000e22:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000e24:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e28:	4618      	mov	r0, r3
 8000e2a:	f7ff ff33 	bl	8000c94 <__NVIC_EnableIRQ>
}
 8000e2e:	bf00      	nop
 8000e30:	3708      	adds	r7, #8
 8000e32:	46bd      	mov	sp, r7
 8000e34:	bd80      	pop	{r7, pc}

08000e36 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000e36:	b580      	push	{r7, lr}
 8000e38:	b082      	sub	sp, #8
 8000e3a:	af00      	add	r7, sp, #0
 8000e3c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000e3e:	6878      	ldr	r0, [r7, #4]
 8000e40:	f7ff ffa4 	bl	8000d8c <SysTick_Config>
 8000e44:	4603      	mov	r3, r0
}
 8000e46:	4618      	mov	r0, r3
 8000e48:	3708      	adds	r7, #8
 8000e4a:	46bd      	mov	sp, r7
 8000e4c:	bd80      	pop	{r7, pc}
	...

08000e50 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000e50:	b480      	push	{r7}
 8000e52:	b087      	sub	sp, #28
 8000e54:	af00      	add	r7, sp, #0
 8000e56:	6078      	str	r0, [r7, #4]
 8000e58:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8000e5a:	2300      	movs	r3, #0
 8000e5c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8000e5e:	e15a      	b.n	8001116 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8000e60:	683b      	ldr	r3, [r7, #0]
 8000e62:	681a      	ldr	r2, [r3, #0]
 8000e64:	2101      	movs	r1, #1
 8000e66:	697b      	ldr	r3, [r7, #20]
 8000e68:	fa01 f303 	lsl.w	r3, r1, r3
 8000e6c:	4013      	ands	r3, r2
 8000e6e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000e70:	68fb      	ldr	r3, [r7, #12]
 8000e72:	2b00      	cmp	r3, #0
 8000e74:	f000 814c 	beq.w	8001110 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000e78:	683b      	ldr	r3, [r7, #0]
 8000e7a:	685b      	ldr	r3, [r3, #4]
 8000e7c:	f003 0303 	and.w	r3, r3, #3
 8000e80:	2b01      	cmp	r3, #1
 8000e82:	d005      	beq.n	8000e90 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000e84:	683b      	ldr	r3, [r7, #0]
 8000e86:	685b      	ldr	r3, [r3, #4]
 8000e88:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000e8c:	2b02      	cmp	r3, #2
 8000e8e:	d130      	bne.n	8000ef2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	689b      	ldr	r3, [r3, #8]
 8000e94:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8000e96:	697b      	ldr	r3, [r7, #20]
 8000e98:	005b      	lsls	r3, r3, #1
 8000e9a:	2203      	movs	r2, #3
 8000e9c:	fa02 f303 	lsl.w	r3, r2, r3
 8000ea0:	43db      	mvns	r3, r3
 8000ea2:	693a      	ldr	r2, [r7, #16]
 8000ea4:	4013      	ands	r3, r2
 8000ea6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000ea8:	683b      	ldr	r3, [r7, #0]
 8000eaa:	68da      	ldr	r2, [r3, #12]
 8000eac:	697b      	ldr	r3, [r7, #20]
 8000eae:	005b      	lsls	r3, r3, #1
 8000eb0:	fa02 f303 	lsl.w	r3, r2, r3
 8000eb4:	693a      	ldr	r2, [r7, #16]
 8000eb6:	4313      	orrs	r3, r2
 8000eb8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	693a      	ldr	r2, [r7, #16]
 8000ebe:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	685b      	ldr	r3, [r3, #4]
 8000ec4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000ec6:	2201      	movs	r2, #1
 8000ec8:	697b      	ldr	r3, [r7, #20]
 8000eca:	fa02 f303 	lsl.w	r3, r2, r3
 8000ece:	43db      	mvns	r3, r3
 8000ed0:	693a      	ldr	r2, [r7, #16]
 8000ed2:	4013      	ands	r3, r2
 8000ed4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000ed6:	683b      	ldr	r3, [r7, #0]
 8000ed8:	685b      	ldr	r3, [r3, #4]
 8000eda:	091b      	lsrs	r3, r3, #4
 8000edc:	f003 0201 	and.w	r2, r3, #1
 8000ee0:	697b      	ldr	r3, [r7, #20]
 8000ee2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ee6:	693a      	ldr	r2, [r7, #16]
 8000ee8:	4313      	orrs	r3, r2
 8000eea:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	693a      	ldr	r2, [r7, #16]
 8000ef0:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000ef2:	683b      	ldr	r3, [r7, #0]
 8000ef4:	685b      	ldr	r3, [r3, #4]
 8000ef6:	f003 0303 	and.w	r3, r3, #3
 8000efa:	2b03      	cmp	r3, #3
 8000efc:	d017      	beq.n	8000f2e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	68db      	ldr	r3, [r3, #12]
 8000f02:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000f04:	697b      	ldr	r3, [r7, #20]
 8000f06:	005b      	lsls	r3, r3, #1
 8000f08:	2203      	movs	r2, #3
 8000f0a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f0e:	43db      	mvns	r3, r3
 8000f10:	693a      	ldr	r2, [r7, #16]
 8000f12:	4013      	ands	r3, r2
 8000f14:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000f16:	683b      	ldr	r3, [r7, #0]
 8000f18:	689a      	ldr	r2, [r3, #8]
 8000f1a:	697b      	ldr	r3, [r7, #20]
 8000f1c:	005b      	lsls	r3, r3, #1
 8000f1e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f22:	693a      	ldr	r2, [r7, #16]
 8000f24:	4313      	orrs	r3, r2
 8000f26:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	693a      	ldr	r2, [r7, #16]
 8000f2c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000f2e:	683b      	ldr	r3, [r7, #0]
 8000f30:	685b      	ldr	r3, [r3, #4]
 8000f32:	f003 0303 	and.w	r3, r3, #3
 8000f36:	2b02      	cmp	r3, #2
 8000f38:	d123      	bne.n	8000f82 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000f3a:	697b      	ldr	r3, [r7, #20]
 8000f3c:	08da      	lsrs	r2, r3, #3
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	3208      	adds	r2, #8
 8000f42:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000f46:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8000f48:	697b      	ldr	r3, [r7, #20]
 8000f4a:	f003 0307 	and.w	r3, r3, #7
 8000f4e:	009b      	lsls	r3, r3, #2
 8000f50:	220f      	movs	r2, #15
 8000f52:	fa02 f303 	lsl.w	r3, r2, r3
 8000f56:	43db      	mvns	r3, r3
 8000f58:	693a      	ldr	r2, [r7, #16]
 8000f5a:	4013      	ands	r3, r2
 8000f5c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8000f5e:	683b      	ldr	r3, [r7, #0]
 8000f60:	691a      	ldr	r2, [r3, #16]
 8000f62:	697b      	ldr	r3, [r7, #20]
 8000f64:	f003 0307 	and.w	r3, r3, #7
 8000f68:	009b      	lsls	r3, r3, #2
 8000f6a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f6e:	693a      	ldr	r2, [r7, #16]
 8000f70:	4313      	orrs	r3, r2
 8000f72:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8000f74:	697b      	ldr	r3, [r7, #20]
 8000f76:	08da      	lsrs	r2, r3, #3
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	3208      	adds	r2, #8
 8000f7c:	6939      	ldr	r1, [r7, #16]
 8000f7e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	681b      	ldr	r3, [r3, #0]
 8000f86:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8000f88:	697b      	ldr	r3, [r7, #20]
 8000f8a:	005b      	lsls	r3, r3, #1
 8000f8c:	2203      	movs	r2, #3
 8000f8e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f92:	43db      	mvns	r3, r3
 8000f94:	693a      	ldr	r2, [r7, #16]
 8000f96:	4013      	ands	r3, r2
 8000f98:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000f9a:	683b      	ldr	r3, [r7, #0]
 8000f9c:	685b      	ldr	r3, [r3, #4]
 8000f9e:	f003 0203 	and.w	r2, r3, #3
 8000fa2:	697b      	ldr	r3, [r7, #20]
 8000fa4:	005b      	lsls	r3, r3, #1
 8000fa6:	fa02 f303 	lsl.w	r3, r2, r3
 8000faa:	693a      	ldr	r2, [r7, #16]
 8000fac:	4313      	orrs	r3, r2
 8000fae:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	693a      	ldr	r2, [r7, #16]
 8000fb4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000fb6:	683b      	ldr	r3, [r7, #0]
 8000fb8:	685b      	ldr	r3, [r3, #4]
 8000fba:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8000fbe:	2b00      	cmp	r3, #0
 8000fc0:	f000 80a6 	beq.w	8001110 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000fc4:	4b5b      	ldr	r3, [pc, #364]	@ (8001134 <HAL_GPIO_Init+0x2e4>)
 8000fc6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000fc8:	4a5a      	ldr	r2, [pc, #360]	@ (8001134 <HAL_GPIO_Init+0x2e4>)
 8000fca:	f043 0301 	orr.w	r3, r3, #1
 8000fce:	6613      	str	r3, [r2, #96]	@ 0x60
 8000fd0:	4b58      	ldr	r3, [pc, #352]	@ (8001134 <HAL_GPIO_Init+0x2e4>)
 8000fd2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000fd4:	f003 0301 	and.w	r3, r3, #1
 8000fd8:	60bb      	str	r3, [r7, #8]
 8000fda:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000fdc:	4a56      	ldr	r2, [pc, #344]	@ (8001138 <HAL_GPIO_Init+0x2e8>)
 8000fde:	697b      	ldr	r3, [r7, #20]
 8000fe0:	089b      	lsrs	r3, r3, #2
 8000fe2:	3302      	adds	r3, #2
 8000fe4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000fe8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8000fea:	697b      	ldr	r3, [r7, #20]
 8000fec:	f003 0303 	and.w	r3, r3, #3
 8000ff0:	009b      	lsls	r3, r3, #2
 8000ff2:	220f      	movs	r2, #15
 8000ff4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ff8:	43db      	mvns	r3, r3
 8000ffa:	693a      	ldr	r2, [r7, #16]
 8000ffc:	4013      	ands	r3, r2
 8000ffe:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8001006:	d01f      	beq.n	8001048 <HAL_GPIO_Init+0x1f8>
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	4a4c      	ldr	r2, [pc, #304]	@ (800113c <HAL_GPIO_Init+0x2ec>)
 800100c:	4293      	cmp	r3, r2
 800100e:	d019      	beq.n	8001044 <HAL_GPIO_Init+0x1f4>
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	4a4b      	ldr	r2, [pc, #300]	@ (8001140 <HAL_GPIO_Init+0x2f0>)
 8001014:	4293      	cmp	r3, r2
 8001016:	d013      	beq.n	8001040 <HAL_GPIO_Init+0x1f0>
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	4a4a      	ldr	r2, [pc, #296]	@ (8001144 <HAL_GPIO_Init+0x2f4>)
 800101c:	4293      	cmp	r3, r2
 800101e:	d00d      	beq.n	800103c <HAL_GPIO_Init+0x1ec>
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	4a49      	ldr	r2, [pc, #292]	@ (8001148 <HAL_GPIO_Init+0x2f8>)
 8001024:	4293      	cmp	r3, r2
 8001026:	d007      	beq.n	8001038 <HAL_GPIO_Init+0x1e8>
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	4a48      	ldr	r2, [pc, #288]	@ (800114c <HAL_GPIO_Init+0x2fc>)
 800102c:	4293      	cmp	r3, r2
 800102e:	d101      	bne.n	8001034 <HAL_GPIO_Init+0x1e4>
 8001030:	2305      	movs	r3, #5
 8001032:	e00a      	b.n	800104a <HAL_GPIO_Init+0x1fa>
 8001034:	2306      	movs	r3, #6
 8001036:	e008      	b.n	800104a <HAL_GPIO_Init+0x1fa>
 8001038:	2304      	movs	r3, #4
 800103a:	e006      	b.n	800104a <HAL_GPIO_Init+0x1fa>
 800103c:	2303      	movs	r3, #3
 800103e:	e004      	b.n	800104a <HAL_GPIO_Init+0x1fa>
 8001040:	2302      	movs	r3, #2
 8001042:	e002      	b.n	800104a <HAL_GPIO_Init+0x1fa>
 8001044:	2301      	movs	r3, #1
 8001046:	e000      	b.n	800104a <HAL_GPIO_Init+0x1fa>
 8001048:	2300      	movs	r3, #0
 800104a:	697a      	ldr	r2, [r7, #20]
 800104c:	f002 0203 	and.w	r2, r2, #3
 8001050:	0092      	lsls	r2, r2, #2
 8001052:	4093      	lsls	r3, r2
 8001054:	693a      	ldr	r2, [r7, #16]
 8001056:	4313      	orrs	r3, r2
 8001058:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800105a:	4937      	ldr	r1, [pc, #220]	@ (8001138 <HAL_GPIO_Init+0x2e8>)
 800105c:	697b      	ldr	r3, [r7, #20]
 800105e:	089b      	lsrs	r3, r3, #2
 8001060:	3302      	adds	r3, #2
 8001062:	693a      	ldr	r2, [r7, #16]
 8001064:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001068:	4b39      	ldr	r3, [pc, #228]	@ (8001150 <HAL_GPIO_Init+0x300>)
 800106a:	689b      	ldr	r3, [r3, #8]
 800106c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800106e:	68fb      	ldr	r3, [r7, #12]
 8001070:	43db      	mvns	r3, r3
 8001072:	693a      	ldr	r2, [r7, #16]
 8001074:	4013      	ands	r3, r2
 8001076:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001078:	683b      	ldr	r3, [r7, #0]
 800107a:	685b      	ldr	r3, [r3, #4]
 800107c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001080:	2b00      	cmp	r3, #0
 8001082:	d003      	beq.n	800108c <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8001084:	693a      	ldr	r2, [r7, #16]
 8001086:	68fb      	ldr	r3, [r7, #12]
 8001088:	4313      	orrs	r3, r2
 800108a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800108c:	4a30      	ldr	r2, [pc, #192]	@ (8001150 <HAL_GPIO_Init+0x300>)
 800108e:	693b      	ldr	r3, [r7, #16]
 8001090:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001092:	4b2f      	ldr	r3, [pc, #188]	@ (8001150 <HAL_GPIO_Init+0x300>)
 8001094:	68db      	ldr	r3, [r3, #12]
 8001096:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001098:	68fb      	ldr	r3, [r7, #12]
 800109a:	43db      	mvns	r3, r3
 800109c:	693a      	ldr	r2, [r7, #16]
 800109e:	4013      	ands	r3, r2
 80010a0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80010a2:	683b      	ldr	r3, [r7, #0]
 80010a4:	685b      	ldr	r3, [r3, #4]
 80010a6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80010aa:	2b00      	cmp	r3, #0
 80010ac:	d003      	beq.n	80010b6 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 80010ae:	693a      	ldr	r2, [r7, #16]
 80010b0:	68fb      	ldr	r3, [r7, #12]
 80010b2:	4313      	orrs	r3, r2
 80010b4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80010b6:	4a26      	ldr	r2, [pc, #152]	@ (8001150 <HAL_GPIO_Init+0x300>)
 80010b8:	693b      	ldr	r3, [r7, #16]
 80010ba:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 80010bc:	4b24      	ldr	r3, [pc, #144]	@ (8001150 <HAL_GPIO_Init+0x300>)
 80010be:	685b      	ldr	r3, [r3, #4]
 80010c0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80010c2:	68fb      	ldr	r3, [r7, #12]
 80010c4:	43db      	mvns	r3, r3
 80010c6:	693a      	ldr	r2, [r7, #16]
 80010c8:	4013      	ands	r3, r2
 80010ca:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80010cc:	683b      	ldr	r3, [r7, #0]
 80010ce:	685b      	ldr	r3, [r3, #4]
 80010d0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	d003      	beq.n	80010e0 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 80010d8:	693a      	ldr	r2, [r7, #16]
 80010da:	68fb      	ldr	r3, [r7, #12]
 80010dc:	4313      	orrs	r3, r2
 80010de:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80010e0:	4a1b      	ldr	r2, [pc, #108]	@ (8001150 <HAL_GPIO_Init+0x300>)
 80010e2:	693b      	ldr	r3, [r7, #16]
 80010e4:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80010e6:	4b1a      	ldr	r3, [pc, #104]	@ (8001150 <HAL_GPIO_Init+0x300>)
 80010e8:	681b      	ldr	r3, [r3, #0]
 80010ea:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80010ec:	68fb      	ldr	r3, [r7, #12]
 80010ee:	43db      	mvns	r3, r3
 80010f0:	693a      	ldr	r2, [r7, #16]
 80010f2:	4013      	ands	r3, r2
 80010f4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80010f6:	683b      	ldr	r3, [r7, #0]
 80010f8:	685b      	ldr	r3, [r3, #4]
 80010fa:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80010fe:	2b00      	cmp	r3, #0
 8001100:	d003      	beq.n	800110a <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8001102:	693a      	ldr	r2, [r7, #16]
 8001104:	68fb      	ldr	r3, [r7, #12]
 8001106:	4313      	orrs	r3, r2
 8001108:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800110a:	4a11      	ldr	r2, [pc, #68]	@ (8001150 <HAL_GPIO_Init+0x300>)
 800110c:	693b      	ldr	r3, [r7, #16]
 800110e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001110:	697b      	ldr	r3, [r7, #20]
 8001112:	3301      	adds	r3, #1
 8001114:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001116:	683b      	ldr	r3, [r7, #0]
 8001118:	681a      	ldr	r2, [r3, #0]
 800111a:	697b      	ldr	r3, [r7, #20]
 800111c:	fa22 f303 	lsr.w	r3, r2, r3
 8001120:	2b00      	cmp	r3, #0
 8001122:	f47f ae9d 	bne.w	8000e60 <HAL_GPIO_Init+0x10>
  }
}
 8001126:	bf00      	nop
 8001128:	bf00      	nop
 800112a:	371c      	adds	r7, #28
 800112c:	46bd      	mov	sp, r7
 800112e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001132:	4770      	bx	lr
 8001134:	40021000 	.word	0x40021000
 8001138:	40010000 	.word	0x40010000
 800113c:	48000400 	.word	0x48000400
 8001140:	48000800 	.word	0x48000800
 8001144:	48000c00 	.word	0x48000c00
 8001148:	48001000 	.word	0x48001000
 800114c:	48001400 	.word	0x48001400
 8001150:	40010400 	.word	0x40010400

08001154 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001154:	b480      	push	{r7}
 8001156:	b085      	sub	sp, #20
 8001158:	af00      	add	r7, sp, #0
 800115a:	6078      	str	r0, [r7, #4]
 800115c:	460b      	mov	r3, r1
 800115e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	691a      	ldr	r2, [r3, #16]
 8001164:	887b      	ldrh	r3, [r7, #2]
 8001166:	4013      	ands	r3, r2
 8001168:	2b00      	cmp	r3, #0
 800116a:	d002      	beq.n	8001172 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800116c:	2301      	movs	r3, #1
 800116e:	73fb      	strb	r3, [r7, #15]
 8001170:	e001      	b.n	8001176 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001172:	2300      	movs	r3, #0
 8001174:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001176:	7bfb      	ldrb	r3, [r7, #15]
}
 8001178:	4618      	mov	r0, r3
 800117a:	3714      	adds	r7, #20
 800117c:	46bd      	mov	sp, r7
 800117e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001182:	4770      	bx	lr

08001184 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001184:	b480      	push	{r7}
 8001186:	b083      	sub	sp, #12
 8001188:	af00      	add	r7, sp, #0
 800118a:	6078      	str	r0, [r7, #4]
 800118c:	460b      	mov	r3, r1
 800118e:	807b      	strh	r3, [r7, #2]
 8001190:	4613      	mov	r3, r2
 8001192:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001194:	787b      	ldrb	r3, [r7, #1]
 8001196:	2b00      	cmp	r3, #0
 8001198:	d003      	beq.n	80011a2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800119a:	887a      	ldrh	r2, [r7, #2]
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80011a0:	e002      	b.n	80011a8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80011a2:	887a      	ldrh	r2, [r7, #2]
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80011a8:	bf00      	nop
 80011aa:	370c      	adds	r7, #12
 80011ac:	46bd      	mov	sp, r7
 80011ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b2:	4770      	bx	lr

080011b4 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80011b4:	b480      	push	{r7}
 80011b6:	b085      	sub	sp, #20
 80011b8:	af00      	add	r7, sp, #0
 80011ba:	6078      	str	r0, [r7, #4]
 80011bc:	460b      	mov	r3, r1
 80011be:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	695b      	ldr	r3, [r3, #20]
 80011c4:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80011c6:	887a      	ldrh	r2, [r7, #2]
 80011c8:	68fb      	ldr	r3, [r7, #12]
 80011ca:	4013      	ands	r3, r2
 80011cc:	041a      	lsls	r2, r3, #16
 80011ce:	68fb      	ldr	r3, [r7, #12]
 80011d0:	43d9      	mvns	r1, r3
 80011d2:	887b      	ldrh	r3, [r7, #2]
 80011d4:	400b      	ands	r3, r1
 80011d6:	431a      	orrs	r2, r3
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	619a      	str	r2, [r3, #24]
}
 80011dc:	bf00      	nop
 80011de:	3714      	adds	r7, #20
 80011e0:	46bd      	mov	sp, r7
 80011e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e6:	4770      	bx	lr

080011e8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80011e8:	b580      	push	{r7, lr}
 80011ea:	b082      	sub	sp, #8
 80011ec:	af00      	add	r7, sp, #0
 80011ee:	4603      	mov	r3, r0
 80011f0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80011f2:	4b08      	ldr	r3, [pc, #32]	@ (8001214 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80011f4:	695a      	ldr	r2, [r3, #20]
 80011f6:	88fb      	ldrh	r3, [r7, #6]
 80011f8:	4013      	ands	r3, r2
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	d006      	beq.n	800120c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80011fe:	4a05      	ldr	r2, [pc, #20]	@ (8001214 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001200:	88fb      	ldrh	r3, [r7, #6]
 8001202:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001204:	88fb      	ldrh	r3, [r7, #6]
 8001206:	4618      	mov	r0, r3
 8001208:	f7ff f9ea 	bl	80005e0 <HAL_GPIO_EXTI_Callback>
  }
}
 800120c:	bf00      	nop
 800120e:	3708      	adds	r7, #8
 8001210:	46bd      	mov	sp, r7
 8001212:	bd80      	pop	{r7, pc}
 8001214:	40010400 	.word	0x40010400

08001218 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001218:	b480      	push	{r7}
 800121a:	b085      	sub	sp, #20
 800121c:	af00      	add	r7, sp, #0
 800121e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	2b00      	cmp	r3, #0
 8001224:	d141      	bne.n	80012aa <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001226:	4b4b      	ldr	r3, [pc, #300]	@ (8001354 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800122e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001232:	d131      	bne.n	8001298 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001234:	4b47      	ldr	r3, [pc, #284]	@ (8001354 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001236:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800123a:	4a46      	ldr	r2, [pc, #280]	@ (8001354 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800123c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001240:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001244:	4b43      	ldr	r3, [pc, #268]	@ (8001354 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800124c:	4a41      	ldr	r2, [pc, #260]	@ (8001354 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800124e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001252:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001254:	4b40      	ldr	r3, [pc, #256]	@ (8001358 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	2232      	movs	r2, #50	@ 0x32
 800125a:	fb02 f303 	mul.w	r3, r2, r3
 800125e:	4a3f      	ldr	r2, [pc, #252]	@ (800135c <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001260:	fba2 2303 	umull	r2, r3, r2, r3
 8001264:	0c9b      	lsrs	r3, r3, #18
 8001266:	3301      	adds	r3, #1
 8001268:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800126a:	e002      	b.n	8001272 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 800126c:	68fb      	ldr	r3, [r7, #12]
 800126e:	3b01      	subs	r3, #1
 8001270:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001272:	4b38      	ldr	r3, [pc, #224]	@ (8001354 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001274:	695b      	ldr	r3, [r3, #20]
 8001276:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800127a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800127e:	d102      	bne.n	8001286 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8001280:	68fb      	ldr	r3, [r7, #12]
 8001282:	2b00      	cmp	r3, #0
 8001284:	d1f2      	bne.n	800126c <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001286:	4b33      	ldr	r3, [pc, #204]	@ (8001354 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001288:	695b      	ldr	r3, [r3, #20]
 800128a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800128e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001292:	d158      	bne.n	8001346 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001294:	2303      	movs	r3, #3
 8001296:	e057      	b.n	8001348 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001298:	4b2e      	ldr	r3, [pc, #184]	@ (8001354 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800129a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800129e:	4a2d      	ldr	r2, [pc, #180]	@ (8001354 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80012a0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80012a4:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 80012a8:	e04d      	b.n	8001346 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80012b0:	d141      	bne.n	8001336 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80012b2:	4b28      	ldr	r3, [pc, #160]	@ (8001354 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80012ba:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80012be:	d131      	bne.n	8001324 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80012c0:	4b24      	ldr	r3, [pc, #144]	@ (8001354 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80012c2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80012c6:	4a23      	ldr	r2, [pc, #140]	@ (8001354 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80012c8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80012cc:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80012d0:	4b20      	ldr	r3, [pc, #128]	@ (8001354 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80012d8:	4a1e      	ldr	r2, [pc, #120]	@ (8001354 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80012da:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80012de:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80012e0:	4b1d      	ldr	r3, [pc, #116]	@ (8001358 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	2232      	movs	r2, #50	@ 0x32
 80012e6:	fb02 f303 	mul.w	r3, r2, r3
 80012ea:	4a1c      	ldr	r2, [pc, #112]	@ (800135c <HAL_PWREx_ControlVoltageScaling+0x144>)
 80012ec:	fba2 2303 	umull	r2, r3, r2, r3
 80012f0:	0c9b      	lsrs	r3, r3, #18
 80012f2:	3301      	adds	r3, #1
 80012f4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80012f6:	e002      	b.n	80012fe <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80012f8:	68fb      	ldr	r3, [r7, #12]
 80012fa:	3b01      	subs	r3, #1
 80012fc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80012fe:	4b15      	ldr	r3, [pc, #84]	@ (8001354 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001300:	695b      	ldr	r3, [r3, #20]
 8001302:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001306:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800130a:	d102      	bne.n	8001312 <HAL_PWREx_ControlVoltageScaling+0xfa>
 800130c:	68fb      	ldr	r3, [r7, #12]
 800130e:	2b00      	cmp	r3, #0
 8001310:	d1f2      	bne.n	80012f8 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001312:	4b10      	ldr	r3, [pc, #64]	@ (8001354 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001314:	695b      	ldr	r3, [r3, #20]
 8001316:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800131a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800131e:	d112      	bne.n	8001346 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001320:	2303      	movs	r3, #3
 8001322:	e011      	b.n	8001348 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001324:	4b0b      	ldr	r3, [pc, #44]	@ (8001354 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001326:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800132a:	4a0a      	ldr	r2, [pc, #40]	@ (8001354 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800132c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001330:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8001334:	e007      	b.n	8001346 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001336:	4b07      	ldr	r3, [pc, #28]	@ (8001354 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800133e:	4a05      	ldr	r2, [pc, #20]	@ (8001354 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001340:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001344:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8001346:	2300      	movs	r3, #0
}
 8001348:	4618      	mov	r0, r3
 800134a:	3714      	adds	r7, #20
 800134c:	46bd      	mov	sp, r7
 800134e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001352:	4770      	bx	lr
 8001354:	40007000 	.word	0x40007000
 8001358:	20000054 	.word	0x20000054
 800135c:	431bde83 	.word	0x431bde83

08001360 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8001360:	b480      	push	{r7}
 8001362:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8001364:	4b05      	ldr	r3, [pc, #20]	@ (800137c <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8001366:	689b      	ldr	r3, [r3, #8]
 8001368:	4a04      	ldr	r2, [pc, #16]	@ (800137c <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800136a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800136e:	6093      	str	r3, [r2, #8]
}
 8001370:	bf00      	nop
 8001372:	46bd      	mov	sp, r7
 8001374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001378:	4770      	bx	lr
 800137a:	bf00      	nop
 800137c:	40007000 	.word	0x40007000

08001380 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001380:	b580      	push	{r7, lr}
 8001382:	b088      	sub	sp, #32
 8001384:	af00      	add	r7, sp, #0
 8001386:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	2b00      	cmp	r3, #0
 800138c:	d101      	bne.n	8001392 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800138e:	2301      	movs	r3, #1
 8001390:	e2fe      	b.n	8001990 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	f003 0301 	and.w	r3, r3, #1
 800139a:	2b00      	cmp	r3, #0
 800139c:	d075      	beq.n	800148a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800139e:	4b97      	ldr	r3, [pc, #604]	@ (80015fc <HAL_RCC_OscConfig+0x27c>)
 80013a0:	689b      	ldr	r3, [r3, #8]
 80013a2:	f003 030c 	and.w	r3, r3, #12
 80013a6:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80013a8:	4b94      	ldr	r3, [pc, #592]	@ (80015fc <HAL_RCC_OscConfig+0x27c>)
 80013aa:	68db      	ldr	r3, [r3, #12]
 80013ac:	f003 0303 	and.w	r3, r3, #3
 80013b0:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 80013b2:	69bb      	ldr	r3, [r7, #24]
 80013b4:	2b0c      	cmp	r3, #12
 80013b6:	d102      	bne.n	80013be <HAL_RCC_OscConfig+0x3e>
 80013b8:	697b      	ldr	r3, [r7, #20]
 80013ba:	2b03      	cmp	r3, #3
 80013bc:	d002      	beq.n	80013c4 <HAL_RCC_OscConfig+0x44>
 80013be:	69bb      	ldr	r3, [r7, #24]
 80013c0:	2b08      	cmp	r3, #8
 80013c2:	d10b      	bne.n	80013dc <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80013c4:	4b8d      	ldr	r3, [pc, #564]	@ (80015fc <HAL_RCC_OscConfig+0x27c>)
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	d05b      	beq.n	8001488 <HAL_RCC_OscConfig+0x108>
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	685b      	ldr	r3, [r3, #4]
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	d157      	bne.n	8001488 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80013d8:	2301      	movs	r3, #1
 80013da:	e2d9      	b.n	8001990 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	685b      	ldr	r3, [r3, #4]
 80013e0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80013e4:	d106      	bne.n	80013f4 <HAL_RCC_OscConfig+0x74>
 80013e6:	4b85      	ldr	r3, [pc, #532]	@ (80015fc <HAL_RCC_OscConfig+0x27c>)
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	4a84      	ldr	r2, [pc, #528]	@ (80015fc <HAL_RCC_OscConfig+0x27c>)
 80013ec:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80013f0:	6013      	str	r3, [r2, #0]
 80013f2:	e01d      	b.n	8001430 <HAL_RCC_OscConfig+0xb0>
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	685b      	ldr	r3, [r3, #4]
 80013f8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80013fc:	d10c      	bne.n	8001418 <HAL_RCC_OscConfig+0x98>
 80013fe:	4b7f      	ldr	r3, [pc, #508]	@ (80015fc <HAL_RCC_OscConfig+0x27c>)
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	4a7e      	ldr	r2, [pc, #504]	@ (80015fc <HAL_RCC_OscConfig+0x27c>)
 8001404:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001408:	6013      	str	r3, [r2, #0]
 800140a:	4b7c      	ldr	r3, [pc, #496]	@ (80015fc <HAL_RCC_OscConfig+0x27c>)
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	4a7b      	ldr	r2, [pc, #492]	@ (80015fc <HAL_RCC_OscConfig+0x27c>)
 8001410:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001414:	6013      	str	r3, [r2, #0]
 8001416:	e00b      	b.n	8001430 <HAL_RCC_OscConfig+0xb0>
 8001418:	4b78      	ldr	r3, [pc, #480]	@ (80015fc <HAL_RCC_OscConfig+0x27c>)
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	4a77      	ldr	r2, [pc, #476]	@ (80015fc <HAL_RCC_OscConfig+0x27c>)
 800141e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001422:	6013      	str	r3, [r2, #0]
 8001424:	4b75      	ldr	r3, [pc, #468]	@ (80015fc <HAL_RCC_OscConfig+0x27c>)
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	4a74      	ldr	r2, [pc, #464]	@ (80015fc <HAL_RCC_OscConfig+0x27c>)
 800142a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800142e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	685b      	ldr	r3, [r3, #4]
 8001434:	2b00      	cmp	r3, #0
 8001436:	d013      	beq.n	8001460 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001438:	f7ff fbcc 	bl	8000bd4 <HAL_GetTick>
 800143c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800143e:	e008      	b.n	8001452 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001440:	f7ff fbc8 	bl	8000bd4 <HAL_GetTick>
 8001444:	4602      	mov	r2, r0
 8001446:	693b      	ldr	r3, [r7, #16]
 8001448:	1ad3      	subs	r3, r2, r3
 800144a:	2b64      	cmp	r3, #100	@ 0x64
 800144c:	d901      	bls.n	8001452 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800144e:	2303      	movs	r3, #3
 8001450:	e29e      	b.n	8001990 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001452:	4b6a      	ldr	r3, [pc, #424]	@ (80015fc <HAL_RCC_OscConfig+0x27c>)
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800145a:	2b00      	cmp	r3, #0
 800145c:	d0f0      	beq.n	8001440 <HAL_RCC_OscConfig+0xc0>
 800145e:	e014      	b.n	800148a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001460:	f7ff fbb8 	bl	8000bd4 <HAL_GetTick>
 8001464:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001466:	e008      	b.n	800147a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001468:	f7ff fbb4 	bl	8000bd4 <HAL_GetTick>
 800146c:	4602      	mov	r2, r0
 800146e:	693b      	ldr	r3, [r7, #16]
 8001470:	1ad3      	subs	r3, r2, r3
 8001472:	2b64      	cmp	r3, #100	@ 0x64
 8001474:	d901      	bls.n	800147a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001476:	2303      	movs	r3, #3
 8001478:	e28a      	b.n	8001990 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800147a:	4b60      	ldr	r3, [pc, #384]	@ (80015fc <HAL_RCC_OscConfig+0x27c>)
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001482:	2b00      	cmp	r3, #0
 8001484:	d1f0      	bne.n	8001468 <HAL_RCC_OscConfig+0xe8>
 8001486:	e000      	b.n	800148a <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001488:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	f003 0302 	and.w	r3, r3, #2
 8001492:	2b00      	cmp	r3, #0
 8001494:	d075      	beq.n	8001582 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001496:	4b59      	ldr	r3, [pc, #356]	@ (80015fc <HAL_RCC_OscConfig+0x27c>)
 8001498:	689b      	ldr	r3, [r3, #8]
 800149a:	f003 030c 	and.w	r3, r3, #12
 800149e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80014a0:	4b56      	ldr	r3, [pc, #344]	@ (80015fc <HAL_RCC_OscConfig+0x27c>)
 80014a2:	68db      	ldr	r3, [r3, #12]
 80014a4:	f003 0303 	and.w	r3, r3, #3
 80014a8:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 80014aa:	69bb      	ldr	r3, [r7, #24]
 80014ac:	2b0c      	cmp	r3, #12
 80014ae:	d102      	bne.n	80014b6 <HAL_RCC_OscConfig+0x136>
 80014b0:	697b      	ldr	r3, [r7, #20]
 80014b2:	2b02      	cmp	r3, #2
 80014b4:	d002      	beq.n	80014bc <HAL_RCC_OscConfig+0x13c>
 80014b6:	69bb      	ldr	r3, [r7, #24]
 80014b8:	2b04      	cmp	r3, #4
 80014ba:	d11f      	bne.n	80014fc <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80014bc:	4b4f      	ldr	r3, [pc, #316]	@ (80015fc <HAL_RCC_OscConfig+0x27c>)
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80014c4:	2b00      	cmp	r3, #0
 80014c6:	d005      	beq.n	80014d4 <HAL_RCC_OscConfig+0x154>
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	68db      	ldr	r3, [r3, #12]
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	d101      	bne.n	80014d4 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 80014d0:	2301      	movs	r3, #1
 80014d2:	e25d      	b.n	8001990 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80014d4:	4b49      	ldr	r3, [pc, #292]	@ (80015fc <HAL_RCC_OscConfig+0x27c>)
 80014d6:	685b      	ldr	r3, [r3, #4]
 80014d8:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	691b      	ldr	r3, [r3, #16]
 80014e0:	061b      	lsls	r3, r3, #24
 80014e2:	4946      	ldr	r1, [pc, #280]	@ (80015fc <HAL_RCC_OscConfig+0x27c>)
 80014e4:	4313      	orrs	r3, r2
 80014e6:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80014e8:	4b45      	ldr	r3, [pc, #276]	@ (8001600 <HAL_RCC_OscConfig+0x280>)
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	4618      	mov	r0, r3
 80014ee:	f7ff fb25 	bl	8000b3c <HAL_InitTick>
 80014f2:	4603      	mov	r3, r0
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	d043      	beq.n	8001580 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 80014f8:	2301      	movs	r3, #1
 80014fa:	e249      	b.n	8001990 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	68db      	ldr	r3, [r3, #12]
 8001500:	2b00      	cmp	r3, #0
 8001502:	d023      	beq.n	800154c <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001504:	4b3d      	ldr	r3, [pc, #244]	@ (80015fc <HAL_RCC_OscConfig+0x27c>)
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	4a3c      	ldr	r2, [pc, #240]	@ (80015fc <HAL_RCC_OscConfig+0x27c>)
 800150a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800150e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001510:	f7ff fb60 	bl	8000bd4 <HAL_GetTick>
 8001514:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001516:	e008      	b.n	800152a <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001518:	f7ff fb5c 	bl	8000bd4 <HAL_GetTick>
 800151c:	4602      	mov	r2, r0
 800151e:	693b      	ldr	r3, [r7, #16]
 8001520:	1ad3      	subs	r3, r2, r3
 8001522:	2b02      	cmp	r3, #2
 8001524:	d901      	bls.n	800152a <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8001526:	2303      	movs	r3, #3
 8001528:	e232      	b.n	8001990 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800152a:	4b34      	ldr	r3, [pc, #208]	@ (80015fc <HAL_RCC_OscConfig+0x27c>)
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001532:	2b00      	cmp	r3, #0
 8001534:	d0f0      	beq.n	8001518 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001536:	4b31      	ldr	r3, [pc, #196]	@ (80015fc <HAL_RCC_OscConfig+0x27c>)
 8001538:	685b      	ldr	r3, [r3, #4]
 800153a:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	691b      	ldr	r3, [r3, #16]
 8001542:	061b      	lsls	r3, r3, #24
 8001544:	492d      	ldr	r1, [pc, #180]	@ (80015fc <HAL_RCC_OscConfig+0x27c>)
 8001546:	4313      	orrs	r3, r2
 8001548:	604b      	str	r3, [r1, #4]
 800154a:	e01a      	b.n	8001582 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800154c:	4b2b      	ldr	r3, [pc, #172]	@ (80015fc <HAL_RCC_OscConfig+0x27c>)
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	4a2a      	ldr	r2, [pc, #168]	@ (80015fc <HAL_RCC_OscConfig+0x27c>)
 8001552:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001556:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001558:	f7ff fb3c 	bl	8000bd4 <HAL_GetTick>
 800155c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800155e:	e008      	b.n	8001572 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001560:	f7ff fb38 	bl	8000bd4 <HAL_GetTick>
 8001564:	4602      	mov	r2, r0
 8001566:	693b      	ldr	r3, [r7, #16]
 8001568:	1ad3      	subs	r3, r2, r3
 800156a:	2b02      	cmp	r3, #2
 800156c:	d901      	bls.n	8001572 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800156e:	2303      	movs	r3, #3
 8001570:	e20e      	b.n	8001990 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001572:	4b22      	ldr	r3, [pc, #136]	@ (80015fc <HAL_RCC_OscConfig+0x27c>)
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800157a:	2b00      	cmp	r3, #0
 800157c:	d1f0      	bne.n	8001560 <HAL_RCC_OscConfig+0x1e0>
 800157e:	e000      	b.n	8001582 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001580:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	f003 0308 	and.w	r3, r3, #8
 800158a:	2b00      	cmp	r3, #0
 800158c:	d041      	beq.n	8001612 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	695b      	ldr	r3, [r3, #20]
 8001592:	2b00      	cmp	r3, #0
 8001594:	d01c      	beq.n	80015d0 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001596:	4b19      	ldr	r3, [pc, #100]	@ (80015fc <HAL_RCC_OscConfig+0x27c>)
 8001598:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800159c:	4a17      	ldr	r2, [pc, #92]	@ (80015fc <HAL_RCC_OscConfig+0x27c>)
 800159e:	f043 0301 	orr.w	r3, r3, #1
 80015a2:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80015a6:	f7ff fb15 	bl	8000bd4 <HAL_GetTick>
 80015aa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80015ac:	e008      	b.n	80015c0 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80015ae:	f7ff fb11 	bl	8000bd4 <HAL_GetTick>
 80015b2:	4602      	mov	r2, r0
 80015b4:	693b      	ldr	r3, [r7, #16]
 80015b6:	1ad3      	subs	r3, r2, r3
 80015b8:	2b02      	cmp	r3, #2
 80015ba:	d901      	bls.n	80015c0 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80015bc:	2303      	movs	r3, #3
 80015be:	e1e7      	b.n	8001990 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80015c0:	4b0e      	ldr	r3, [pc, #56]	@ (80015fc <HAL_RCC_OscConfig+0x27c>)
 80015c2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80015c6:	f003 0302 	and.w	r3, r3, #2
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d0ef      	beq.n	80015ae <HAL_RCC_OscConfig+0x22e>
 80015ce:	e020      	b.n	8001612 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80015d0:	4b0a      	ldr	r3, [pc, #40]	@ (80015fc <HAL_RCC_OscConfig+0x27c>)
 80015d2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80015d6:	4a09      	ldr	r2, [pc, #36]	@ (80015fc <HAL_RCC_OscConfig+0x27c>)
 80015d8:	f023 0301 	bic.w	r3, r3, #1
 80015dc:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80015e0:	f7ff faf8 	bl	8000bd4 <HAL_GetTick>
 80015e4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80015e6:	e00d      	b.n	8001604 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80015e8:	f7ff faf4 	bl	8000bd4 <HAL_GetTick>
 80015ec:	4602      	mov	r2, r0
 80015ee:	693b      	ldr	r3, [r7, #16]
 80015f0:	1ad3      	subs	r3, r2, r3
 80015f2:	2b02      	cmp	r3, #2
 80015f4:	d906      	bls.n	8001604 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80015f6:	2303      	movs	r3, #3
 80015f8:	e1ca      	b.n	8001990 <HAL_RCC_OscConfig+0x610>
 80015fa:	bf00      	nop
 80015fc:	40021000 	.word	0x40021000
 8001600:	20000058 	.word	0x20000058
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001604:	4b8c      	ldr	r3, [pc, #560]	@ (8001838 <HAL_RCC_OscConfig+0x4b8>)
 8001606:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800160a:	f003 0302 	and.w	r3, r3, #2
 800160e:	2b00      	cmp	r3, #0
 8001610:	d1ea      	bne.n	80015e8 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	f003 0304 	and.w	r3, r3, #4
 800161a:	2b00      	cmp	r3, #0
 800161c:	f000 80a6 	beq.w	800176c <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001620:	2300      	movs	r3, #0
 8001622:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001624:	4b84      	ldr	r3, [pc, #528]	@ (8001838 <HAL_RCC_OscConfig+0x4b8>)
 8001626:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001628:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800162c:	2b00      	cmp	r3, #0
 800162e:	d101      	bne.n	8001634 <HAL_RCC_OscConfig+0x2b4>
 8001630:	2301      	movs	r3, #1
 8001632:	e000      	b.n	8001636 <HAL_RCC_OscConfig+0x2b6>
 8001634:	2300      	movs	r3, #0
 8001636:	2b00      	cmp	r3, #0
 8001638:	d00d      	beq.n	8001656 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800163a:	4b7f      	ldr	r3, [pc, #508]	@ (8001838 <HAL_RCC_OscConfig+0x4b8>)
 800163c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800163e:	4a7e      	ldr	r2, [pc, #504]	@ (8001838 <HAL_RCC_OscConfig+0x4b8>)
 8001640:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001644:	6593      	str	r3, [r2, #88]	@ 0x58
 8001646:	4b7c      	ldr	r3, [pc, #496]	@ (8001838 <HAL_RCC_OscConfig+0x4b8>)
 8001648:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800164a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800164e:	60fb      	str	r3, [r7, #12]
 8001650:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001652:	2301      	movs	r3, #1
 8001654:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001656:	4b79      	ldr	r3, [pc, #484]	@ (800183c <HAL_RCC_OscConfig+0x4bc>)
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800165e:	2b00      	cmp	r3, #0
 8001660:	d118      	bne.n	8001694 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001662:	4b76      	ldr	r3, [pc, #472]	@ (800183c <HAL_RCC_OscConfig+0x4bc>)
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	4a75      	ldr	r2, [pc, #468]	@ (800183c <HAL_RCC_OscConfig+0x4bc>)
 8001668:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800166c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800166e:	f7ff fab1 	bl	8000bd4 <HAL_GetTick>
 8001672:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001674:	e008      	b.n	8001688 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001676:	f7ff faad 	bl	8000bd4 <HAL_GetTick>
 800167a:	4602      	mov	r2, r0
 800167c:	693b      	ldr	r3, [r7, #16]
 800167e:	1ad3      	subs	r3, r2, r3
 8001680:	2b02      	cmp	r3, #2
 8001682:	d901      	bls.n	8001688 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8001684:	2303      	movs	r3, #3
 8001686:	e183      	b.n	8001990 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001688:	4b6c      	ldr	r3, [pc, #432]	@ (800183c <HAL_RCC_OscConfig+0x4bc>)
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001690:	2b00      	cmp	r3, #0
 8001692:	d0f0      	beq.n	8001676 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	689b      	ldr	r3, [r3, #8]
 8001698:	2b01      	cmp	r3, #1
 800169a:	d108      	bne.n	80016ae <HAL_RCC_OscConfig+0x32e>
 800169c:	4b66      	ldr	r3, [pc, #408]	@ (8001838 <HAL_RCC_OscConfig+0x4b8>)
 800169e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80016a2:	4a65      	ldr	r2, [pc, #404]	@ (8001838 <HAL_RCC_OscConfig+0x4b8>)
 80016a4:	f043 0301 	orr.w	r3, r3, #1
 80016a8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80016ac:	e024      	b.n	80016f8 <HAL_RCC_OscConfig+0x378>
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	689b      	ldr	r3, [r3, #8]
 80016b2:	2b05      	cmp	r3, #5
 80016b4:	d110      	bne.n	80016d8 <HAL_RCC_OscConfig+0x358>
 80016b6:	4b60      	ldr	r3, [pc, #384]	@ (8001838 <HAL_RCC_OscConfig+0x4b8>)
 80016b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80016bc:	4a5e      	ldr	r2, [pc, #376]	@ (8001838 <HAL_RCC_OscConfig+0x4b8>)
 80016be:	f043 0304 	orr.w	r3, r3, #4
 80016c2:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80016c6:	4b5c      	ldr	r3, [pc, #368]	@ (8001838 <HAL_RCC_OscConfig+0x4b8>)
 80016c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80016cc:	4a5a      	ldr	r2, [pc, #360]	@ (8001838 <HAL_RCC_OscConfig+0x4b8>)
 80016ce:	f043 0301 	orr.w	r3, r3, #1
 80016d2:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80016d6:	e00f      	b.n	80016f8 <HAL_RCC_OscConfig+0x378>
 80016d8:	4b57      	ldr	r3, [pc, #348]	@ (8001838 <HAL_RCC_OscConfig+0x4b8>)
 80016da:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80016de:	4a56      	ldr	r2, [pc, #344]	@ (8001838 <HAL_RCC_OscConfig+0x4b8>)
 80016e0:	f023 0301 	bic.w	r3, r3, #1
 80016e4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80016e8:	4b53      	ldr	r3, [pc, #332]	@ (8001838 <HAL_RCC_OscConfig+0x4b8>)
 80016ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80016ee:	4a52      	ldr	r2, [pc, #328]	@ (8001838 <HAL_RCC_OscConfig+0x4b8>)
 80016f0:	f023 0304 	bic.w	r3, r3, #4
 80016f4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	689b      	ldr	r3, [r3, #8]
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	d016      	beq.n	800172e <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001700:	f7ff fa68 	bl	8000bd4 <HAL_GetTick>
 8001704:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001706:	e00a      	b.n	800171e <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001708:	f7ff fa64 	bl	8000bd4 <HAL_GetTick>
 800170c:	4602      	mov	r2, r0
 800170e:	693b      	ldr	r3, [r7, #16]
 8001710:	1ad3      	subs	r3, r2, r3
 8001712:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001716:	4293      	cmp	r3, r2
 8001718:	d901      	bls.n	800171e <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 800171a:	2303      	movs	r3, #3
 800171c:	e138      	b.n	8001990 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800171e:	4b46      	ldr	r3, [pc, #280]	@ (8001838 <HAL_RCC_OscConfig+0x4b8>)
 8001720:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001724:	f003 0302 	and.w	r3, r3, #2
 8001728:	2b00      	cmp	r3, #0
 800172a:	d0ed      	beq.n	8001708 <HAL_RCC_OscConfig+0x388>
 800172c:	e015      	b.n	800175a <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800172e:	f7ff fa51 	bl	8000bd4 <HAL_GetTick>
 8001732:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001734:	e00a      	b.n	800174c <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001736:	f7ff fa4d 	bl	8000bd4 <HAL_GetTick>
 800173a:	4602      	mov	r2, r0
 800173c:	693b      	ldr	r3, [r7, #16]
 800173e:	1ad3      	subs	r3, r2, r3
 8001740:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001744:	4293      	cmp	r3, r2
 8001746:	d901      	bls.n	800174c <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8001748:	2303      	movs	r3, #3
 800174a:	e121      	b.n	8001990 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800174c:	4b3a      	ldr	r3, [pc, #232]	@ (8001838 <HAL_RCC_OscConfig+0x4b8>)
 800174e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001752:	f003 0302 	and.w	r3, r3, #2
 8001756:	2b00      	cmp	r3, #0
 8001758:	d1ed      	bne.n	8001736 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800175a:	7ffb      	ldrb	r3, [r7, #31]
 800175c:	2b01      	cmp	r3, #1
 800175e:	d105      	bne.n	800176c <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001760:	4b35      	ldr	r3, [pc, #212]	@ (8001838 <HAL_RCC_OscConfig+0x4b8>)
 8001762:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001764:	4a34      	ldr	r2, [pc, #208]	@ (8001838 <HAL_RCC_OscConfig+0x4b8>)
 8001766:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800176a:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	f003 0320 	and.w	r3, r3, #32
 8001774:	2b00      	cmp	r3, #0
 8001776:	d03c      	beq.n	80017f2 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	699b      	ldr	r3, [r3, #24]
 800177c:	2b00      	cmp	r3, #0
 800177e:	d01c      	beq.n	80017ba <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001780:	4b2d      	ldr	r3, [pc, #180]	@ (8001838 <HAL_RCC_OscConfig+0x4b8>)
 8001782:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001786:	4a2c      	ldr	r2, [pc, #176]	@ (8001838 <HAL_RCC_OscConfig+0x4b8>)
 8001788:	f043 0301 	orr.w	r3, r3, #1
 800178c:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001790:	f7ff fa20 	bl	8000bd4 <HAL_GetTick>
 8001794:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001796:	e008      	b.n	80017aa <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001798:	f7ff fa1c 	bl	8000bd4 <HAL_GetTick>
 800179c:	4602      	mov	r2, r0
 800179e:	693b      	ldr	r3, [r7, #16]
 80017a0:	1ad3      	subs	r3, r2, r3
 80017a2:	2b02      	cmp	r3, #2
 80017a4:	d901      	bls.n	80017aa <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 80017a6:	2303      	movs	r3, #3
 80017a8:	e0f2      	b.n	8001990 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80017aa:	4b23      	ldr	r3, [pc, #140]	@ (8001838 <HAL_RCC_OscConfig+0x4b8>)
 80017ac:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80017b0:	f003 0302 	and.w	r3, r3, #2
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	d0ef      	beq.n	8001798 <HAL_RCC_OscConfig+0x418>
 80017b8:	e01b      	b.n	80017f2 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80017ba:	4b1f      	ldr	r3, [pc, #124]	@ (8001838 <HAL_RCC_OscConfig+0x4b8>)
 80017bc:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80017c0:	4a1d      	ldr	r2, [pc, #116]	@ (8001838 <HAL_RCC_OscConfig+0x4b8>)
 80017c2:	f023 0301 	bic.w	r3, r3, #1
 80017c6:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80017ca:	f7ff fa03 	bl	8000bd4 <HAL_GetTick>
 80017ce:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80017d0:	e008      	b.n	80017e4 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80017d2:	f7ff f9ff 	bl	8000bd4 <HAL_GetTick>
 80017d6:	4602      	mov	r2, r0
 80017d8:	693b      	ldr	r3, [r7, #16]
 80017da:	1ad3      	subs	r3, r2, r3
 80017dc:	2b02      	cmp	r3, #2
 80017de:	d901      	bls.n	80017e4 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 80017e0:	2303      	movs	r3, #3
 80017e2:	e0d5      	b.n	8001990 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80017e4:	4b14      	ldr	r3, [pc, #80]	@ (8001838 <HAL_RCC_OscConfig+0x4b8>)
 80017e6:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80017ea:	f003 0302 	and.w	r3, r3, #2
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d1ef      	bne.n	80017d2 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	69db      	ldr	r3, [r3, #28]
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	f000 80c9 	beq.w	800198e <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80017fc:	4b0e      	ldr	r3, [pc, #56]	@ (8001838 <HAL_RCC_OscConfig+0x4b8>)
 80017fe:	689b      	ldr	r3, [r3, #8]
 8001800:	f003 030c 	and.w	r3, r3, #12
 8001804:	2b0c      	cmp	r3, #12
 8001806:	f000 8083 	beq.w	8001910 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	69db      	ldr	r3, [r3, #28]
 800180e:	2b02      	cmp	r3, #2
 8001810:	d15e      	bne.n	80018d0 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001812:	4b09      	ldr	r3, [pc, #36]	@ (8001838 <HAL_RCC_OscConfig+0x4b8>)
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	4a08      	ldr	r2, [pc, #32]	@ (8001838 <HAL_RCC_OscConfig+0x4b8>)
 8001818:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800181c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800181e:	f7ff f9d9 	bl	8000bd4 <HAL_GetTick>
 8001822:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001824:	e00c      	b.n	8001840 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001826:	f7ff f9d5 	bl	8000bd4 <HAL_GetTick>
 800182a:	4602      	mov	r2, r0
 800182c:	693b      	ldr	r3, [r7, #16]
 800182e:	1ad3      	subs	r3, r2, r3
 8001830:	2b02      	cmp	r3, #2
 8001832:	d905      	bls.n	8001840 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8001834:	2303      	movs	r3, #3
 8001836:	e0ab      	b.n	8001990 <HAL_RCC_OscConfig+0x610>
 8001838:	40021000 	.word	0x40021000
 800183c:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001840:	4b55      	ldr	r3, [pc, #340]	@ (8001998 <HAL_RCC_OscConfig+0x618>)
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001848:	2b00      	cmp	r3, #0
 800184a:	d1ec      	bne.n	8001826 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800184c:	4b52      	ldr	r3, [pc, #328]	@ (8001998 <HAL_RCC_OscConfig+0x618>)
 800184e:	68da      	ldr	r2, [r3, #12]
 8001850:	4b52      	ldr	r3, [pc, #328]	@ (800199c <HAL_RCC_OscConfig+0x61c>)
 8001852:	4013      	ands	r3, r2
 8001854:	687a      	ldr	r2, [r7, #4]
 8001856:	6a11      	ldr	r1, [r2, #32]
 8001858:	687a      	ldr	r2, [r7, #4]
 800185a:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800185c:	3a01      	subs	r2, #1
 800185e:	0112      	lsls	r2, r2, #4
 8001860:	4311      	orrs	r1, r2
 8001862:	687a      	ldr	r2, [r7, #4]
 8001864:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8001866:	0212      	lsls	r2, r2, #8
 8001868:	4311      	orrs	r1, r2
 800186a:	687a      	ldr	r2, [r7, #4]
 800186c:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800186e:	0852      	lsrs	r2, r2, #1
 8001870:	3a01      	subs	r2, #1
 8001872:	0552      	lsls	r2, r2, #21
 8001874:	4311      	orrs	r1, r2
 8001876:	687a      	ldr	r2, [r7, #4]
 8001878:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800187a:	0852      	lsrs	r2, r2, #1
 800187c:	3a01      	subs	r2, #1
 800187e:	0652      	lsls	r2, r2, #25
 8001880:	4311      	orrs	r1, r2
 8001882:	687a      	ldr	r2, [r7, #4]
 8001884:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8001886:	06d2      	lsls	r2, r2, #27
 8001888:	430a      	orrs	r2, r1
 800188a:	4943      	ldr	r1, [pc, #268]	@ (8001998 <HAL_RCC_OscConfig+0x618>)
 800188c:	4313      	orrs	r3, r2
 800188e:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001890:	4b41      	ldr	r3, [pc, #260]	@ (8001998 <HAL_RCC_OscConfig+0x618>)
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	4a40      	ldr	r2, [pc, #256]	@ (8001998 <HAL_RCC_OscConfig+0x618>)
 8001896:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800189a:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800189c:	4b3e      	ldr	r3, [pc, #248]	@ (8001998 <HAL_RCC_OscConfig+0x618>)
 800189e:	68db      	ldr	r3, [r3, #12]
 80018a0:	4a3d      	ldr	r2, [pc, #244]	@ (8001998 <HAL_RCC_OscConfig+0x618>)
 80018a2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80018a6:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018a8:	f7ff f994 	bl	8000bd4 <HAL_GetTick>
 80018ac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80018ae:	e008      	b.n	80018c2 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80018b0:	f7ff f990 	bl	8000bd4 <HAL_GetTick>
 80018b4:	4602      	mov	r2, r0
 80018b6:	693b      	ldr	r3, [r7, #16]
 80018b8:	1ad3      	subs	r3, r2, r3
 80018ba:	2b02      	cmp	r3, #2
 80018bc:	d901      	bls.n	80018c2 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 80018be:	2303      	movs	r3, #3
 80018c0:	e066      	b.n	8001990 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80018c2:	4b35      	ldr	r3, [pc, #212]	@ (8001998 <HAL_RCC_OscConfig+0x618>)
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d0f0      	beq.n	80018b0 <HAL_RCC_OscConfig+0x530>
 80018ce:	e05e      	b.n	800198e <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80018d0:	4b31      	ldr	r3, [pc, #196]	@ (8001998 <HAL_RCC_OscConfig+0x618>)
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	4a30      	ldr	r2, [pc, #192]	@ (8001998 <HAL_RCC_OscConfig+0x618>)
 80018d6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80018da:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018dc:	f7ff f97a 	bl	8000bd4 <HAL_GetTick>
 80018e0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80018e2:	e008      	b.n	80018f6 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80018e4:	f7ff f976 	bl	8000bd4 <HAL_GetTick>
 80018e8:	4602      	mov	r2, r0
 80018ea:	693b      	ldr	r3, [r7, #16]
 80018ec:	1ad3      	subs	r3, r2, r3
 80018ee:	2b02      	cmp	r3, #2
 80018f0:	d901      	bls.n	80018f6 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 80018f2:	2303      	movs	r3, #3
 80018f4:	e04c      	b.n	8001990 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80018f6:	4b28      	ldr	r3, [pc, #160]	@ (8001998 <HAL_RCC_OscConfig+0x618>)
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d1f0      	bne.n	80018e4 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8001902:	4b25      	ldr	r3, [pc, #148]	@ (8001998 <HAL_RCC_OscConfig+0x618>)
 8001904:	68da      	ldr	r2, [r3, #12]
 8001906:	4924      	ldr	r1, [pc, #144]	@ (8001998 <HAL_RCC_OscConfig+0x618>)
 8001908:	4b25      	ldr	r3, [pc, #148]	@ (80019a0 <HAL_RCC_OscConfig+0x620>)
 800190a:	4013      	ands	r3, r2
 800190c:	60cb      	str	r3, [r1, #12]
 800190e:	e03e      	b.n	800198e <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	69db      	ldr	r3, [r3, #28]
 8001914:	2b01      	cmp	r3, #1
 8001916:	d101      	bne.n	800191c <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8001918:	2301      	movs	r3, #1
 800191a:	e039      	b.n	8001990 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 800191c:	4b1e      	ldr	r3, [pc, #120]	@ (8001998 <HAL_RCC_OscConfig+0x618>)
 800191e:	68db      	ldr	r3, [r3, #12]
 8001920:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001922:	697b      	ldr	r3, [r7, #20]
 8001924:	f003 0203 	and.w	r2, r3, #3
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	6a1b      	ldr	r3, [r3, #32]
 800192c:	429a      	cmp	r2, r3
 800192e:	d12c      	bne.n	800198a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001930:	697b      	ldr	r3, [r7, #20]
 8001932:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800193a:	3b01      	subs	r3, #1
 800193c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800193e:	429a      	cmp	r2, r3
 8001940:	d123      	bne.n	800198a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8001942:	697b      	ldr	r3, [r7, #20]
 8001944:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800194c:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800194e:	429a      	cmp	r2, r3
 8001950:	d11b      	bne.n	800198a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001952:	697b      	ldr	r3, [r7, #20]
 8001954:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800195c:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800195e:	429a      	cmp	r2, r3
 8001960:	d113      	bne.n	800198a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001962:	697b      	ldr	r3, [r7, #20]
 8001964:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800196c:	085b      	lsrs	r3, r3, #1
 800196e:	3b01      	subs	r3, #1
 8001970:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001972:	429a      	cmp	r2, r3
 8001974:	d109      	bne.n	800198a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001976:	697b      	ldr	r3, [r7, #20]
 8001978:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001980:	085b      	lsrs	r3, r3, #1
 8001982:	3b01      	subs	r3, #1
 8001984:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001986:	429a      	cmp	r2, r3
 8001988:	d001      	beq.n	800198e <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 800198a:	2301      	movs	r3, #1
 800198c:	e000      	b.n	8001990 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 800198e:	2300      	movs	r3, #0
}
 8001990:	4618      	mov	r0, r3
 8001992:	3720      	adds	r7, #32
 8001994:	46bd      	mov	sp, r7
 8001996:	bd80      	pop	{r7, pc}
 8001998:	40021000 	.word	0x40021000
 800199c:	019f800c 	.word	0x019f800c
 80019a0:	feeefffc 	.word	0xfeeefffc

080019a4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80019a4:	b580      	push	{r7, lr}
 80019a6:	b086      	sub	sp, #24
 80019a8:	af00      	add	r7, sp, #0
 80019aa:	6078      	str	r0, [r7, #4]
 80019ac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80019ae:	2300      	movs	r3, #0
 80019b0:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d101      	bne.n	80019bc <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80019b8:	2301      	movs	r3, #1
 80019ba:	e11e      	b.n	8001bfa <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80019bc:	4b91      	ldr	r3, [pc, #580]	@ (8001c04 <HAL_RCC_ClockConfig+0x260>)
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	f003 030f 	and.w	r3, r3, #15
 80019c4:	683a      	ldr	r2, [r7, #0]
 80019c6:	429a      	cmp	r2, r3
 80019c8:	d910      	bls.n	80019ec <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80019ca:	4b8e      	ldr	r3, [pc, #568]	@ (8001c04 <HAL_RCC_ClockConfig+0x260>)
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	f023 020f 	bic.w	r2, r3, #15
 80019d2:	498c      	ldr	r1, [pc, #560]	@ (8001c04 <HAL_RCC_ClockConfig+0x260>)
 80019d4:	683b      	ldr	r3, [r7, #0]
 80019d6:	4313      	orrs	r3, r2
 80019d8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80019da:	4b8a      	ldr	r3, [pc, #552]	@ (8001c04 <HAL_RCC_ClockConfig+0x260>)
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	f003 030f 	and.w	r3, r3, #15
 80019e2:	683a      	ldr	r2, [r7, #0]
 80019e4:	429a      	cmp	r2, r3
 80019e6:	d001      	beq.n	80019ec <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80019e8:	2301      	movs	r3, #1
 80019ea:	e106      	b.n	8001bfa <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	f003 0301 	and.w	r3, r3, #1
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	d073      	beq.n	8001ae0 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	685b      	ldr	r3, [r3, #4]
 80019fc:	2b03      	cmp	r3, #3
 80019fe:	d129      	bne.n	8001a54 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001a00:	4b81      	ldr	r3, [pc, #516]	@ (8001c08 <HAL_RCC_ClockConfig+0x264>)
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	d101      	bne.n	8001a10 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8001a0c:	2301      	movs	r3, #1
 8001a0e:	e0f4      	b.n	8001bfa <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8001a10:	f000 f966 	bl	8001ce0 <RCC_GetSysClockFreqFromPLLSource>
 8001a14:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8001a16:	693b      	ldr	r3, [r7, #16]
 8001a18:	4a7c      	ldr	r2, [pc, #496]	@ (8001c0c <HAL_RCC_ClockConfig+0x268>)
 8001a1a:	4293      	cmp	r3, r2
 8001a1c:	d93f      	bls.n	8001a9e <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8001a1e:	4b7a      	ldr	r3, [pc, #488]	@ (8001c08 <HAL_RCC_ClockConfig+0x264>)
 8001a20:	689b      	ldr	r3, [r3, #8]
 8001a22:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d009      	beq.n	8001a3e <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d033      	beq.n	8001a9e <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d12f      	bne.n	8001a9e <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8001a3e:	4b72      	ldr	r3, [pc, #456]	@ (8001c08 <HAL_RCC_ClockConfig+0x264>)
 8001a40:	689b      	ldr	r3, [r3, #8]
 8001a42:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8001a46:	4a70      	ldr	r2, [pc, #448]	@ (8001c08 <HAL_RCC_ClockConfig+0x264>)
 8001a48:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001a4c:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8001a4e:	2380      	movs	r3, #128	@ 0x80
 8001a50:	617b      	str	r3, [r7, #20]
 8001a52:	e024      	b.n	8001a9e <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	685b      	ldr	r3, [r3, #4]
 8001a58:	2b02      	cmp	r3, #2
 8001a5a:	d107      	bne.n	8001a6c <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001a5c:	4b6a      	ldr	r3, [pc, #424]	@ (8001c08 <HAL_RCC_ClockConfig+0x264>)
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	d109      	bne.n	8001a7c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8001a68:	2301      	movs	r3, #1
 8001a6a:	e0c6      	b.n	8001bfa <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001a6c:	4b66      	ldr	r3, [pc, #408]	@ (8001c08 <HAL_RCC_ClockConfig+0x264>)
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	d101      	bne.n	8001a7c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8001a78:	2301      	movs	r3, #1
 8001a7a:	e0be      	b.n	8001bfa <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8001a7c:	f000 f8ce 	bl	8001c1c <HAL_RCC_GetSysClockFreq>
 8001a80:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8001a82:	693b      	ldr	r3, [r7, #16]
 8001a84:	4a61      	ldr	r2, [pc, #388]	@ (8001c0c <HAL_RCC_ClockConfig+0x268>)
 8001a86:	4293      	cmp	r3, r2
 8001a88:	d909      	bls.n	8001a9e <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8001a8a:	4b5f      	ldr	r3, [pc, #380]	@ (8001c08 <HAL_RCC_ClockConfig+0x264>)
 8001a8c:	689b      	ldr	r3, [r3, #8]
 8001a8e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8001a92:	4a5d      	ldr	r2, [pc, #372]	@ (8001c08 <HAL_RCC_ClockConfig+0x264>)
 8001a94:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001a98:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8001a9a:	2380      	movs	r3, #128	@ 0x80
 8001a9c:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001a9e:	4b5a      	ldr	r3, [pc, #360]	@ (8001c08 <HAL_RCC_ClockConfig+0x264>)
 8001aa0:	689b      	ldr	r3, [r3, #8]
 8001aa2:	f023 0203 	bic.w	r2, r3, #3
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	685b      	ldr	r3, [r3, #4]
 8001aaa:	4957      	ldr	r1, [pc, #348]	@ (8001c08 <HAL_RCC_ClockConfig+0x264>)
 8001aac:	4313      	orrs	r3, r2
 8001aae:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001ab0:	f7ff f890 	bl	8000bd4 <HAL_GetTick>
 8001ab4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001ab6:	e00a      	b.n	8001ace <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001ab8:	f7ff f88c 	bl	8000bd4 <HAL_GetTick>
 8001abc:	4602      	mov	r2, r0
 8001abe:	68fb      	ldr	r3, [r7, #12]
 8001ac0:	1ad3      	subs	r3, r2, r3
 8001ac2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001ac6:	4293      	cmp	r3, r2
 8001ac8:	d901      	bls.n	8001ace <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8001aca:	2303      	movs	r3, #3
 8001acc:	e095      	b.n	8001bfa <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001ace:	4b4e      	ldr	r3, [pc, #312]	@ (8001c08 <HAL_RCC_ClockConfig+0x264>)
 8001ad0:	689b      	ldr	r3, [r3, #8]
 8001ad2:	f003 020c 	and.w	r2, r3, #12
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	685b      	ldr	r3, [r3, #4]
 8001ada:	009b      	lsls	r3, r3, #2
 8001adc:	429a      	cmp	r2, r3
 8001ade:	d1eb      	bne.n	8001ab8 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	f003 0302 	and.w	r3, r3, #2
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	d023      	beq.n	8001b34 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	f003 0304 	and.w	r3, r3, #4
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d005      	beq.n	8001b04 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001af8:	4b43      	ldr	r3, [pc, #268]	@ (8001c08 <HAL_RCC_ClockConfig+0x264>)
 8001afa:	689b      	ldr	r3, [r3, #8]
 8001afc:	4a42      	ldr	r2, [pc, #264]	@ (8001c08 <HAL_RCC_ClockConfig+0x264>)
 8001afe:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8001b02:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	f003 0308 	and.w	r3, r3, #8
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d007      	beq.n	8001b20 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8001b10:	4b3d      	ldr	r3, [pc, #244]	@ (8001c08 <HAL_RCC_ClockConfig+0x264>)
 8001b12:	689b      	ldr	r3, [r3, #8]
 8001b14:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8001b18:	4a3b      	ldr	r2, [pc, #236]	@ (8001c08 <HAL_RCC_ClockConfig+0x264>)
 8001b1a:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8001b1e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001b20:	4b39      	ldr	r3, [pc, #228]	@ (8001c08 <HAL_RCC_ClockConfig+0x264>)
 8001b22:	689b      	ldr	r3, [r3, #8]
 8001b24:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	689b      	ldr	r3, [r3, #8]
 8001b2c:	4936      	ldr	r1, [pc, #216]	@ (8001c08 <HAL_RCC_ClockConfig+0x264>)
 8001b2e:	4313      	orrs	r3, r2
 8001b30:	608b      	str	r3, [r1, #8]
 8001b32:	e008      	b.n	8001b46 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8001b34:	697b      	ldr	r3, [r7, #20]
 8001b36:	2b80      	cmp	r3, #128	@ 0x80
 8001b38:	d105      	bne.n	8001b46 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8001b3a:	4b33      	ldr	r3, [pc, #204]	@ (8001c08 <HAL_RCC_ClockConfig+0x264>)
 8001b3c:	689b      	ldr	r3, [r3, #8]
 8001b3e:	4a32      	ldr	r2, [pc, #200]	@ (8001c08 <HAL_RCC_ClockConfig+0x264>)
 8001b40:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8001b44:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001b46:	4b2f      	ldr	r3, [pc, #188]	@ (8001c04 <HAL_RCC_ClockConfig+0x260>)
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	f003 030f 	and.w	r3, r3, #15
 8001b4e:	683a      	ldr	r2, [r7, #0]
 8001b50:	429a      	cmp	r2, r3
 8001b52:	d21d      	bcs.n	8001b90 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b54:	4b2b      	ldr	r3, [pc, #172]	@ (8001c04 <HAL_RCC_ClockConfig+0x260>)
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	f023 020f 	bic.w	r2, r3, #15
 8001b5c:	4929      	ldr	r1, [pc, #164]	@ (8001c04 <HAL_RCC_ClockConfig+0x260>)
 8001b5e:	683b      	ldr	r3, [r7, #0]
 8001b60:	4313      	orrs	r3, r2
 8001b62:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001b64:	f7ff f836 	bl	8000bd4 <HAL_GetTick>
 8001b68:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b6a:	e00a      	b.n	8001b82 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001b6c:	f7ff f832 	bl	8000bd4 <HAL_GetTick>
 8001b70:	4602      	mov	r2, r0
 8001b72:	68fb      	ldr	r3, [r7, #12]
 8001b74:	1ad3      	subs	r3, r2, r3
 8001b76:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001b7a:	4293      	cmp	r3, r2
 8001b7c:	d901      	bls.n	8001b82 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8001b7e:	2303      	movs	r3, #3
 8001b80:	e03b      	b.n	8001bfa <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b82:	4b20      	ldr	r3, [pc, #128]	@ (8001c04 <HAL_RCC_ClockConfig+0x260>)
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	f003 030f 	and.w	r3, r3, #15
 8001b8a:	683a      	ldr	r2, [r7, #0]
 8001b8c:	429a      	cmp	r2, r3
 8001b8e:	d1ed      	bne.n	8001b6c <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	f003 0304 	and.w	r3, r3, #4
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d008      	beq.n	8001bae <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001b9c:	4b1a      	ldr	r3, [pc, #104]	@ (8001c08 <HAL_RCC_ClockConfig+0x264>)
 8001b9e:	689b      	ldr	r3, [r3, #8]
 8001ba0:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	68db      	ldr	r3, [r3, #12]
 8001ba8:	4917      	ldr	r1, [pc, #92]	@ (8001c08 <HAL_RCC_ClockConfig+0x264>)
 8001baa:	4313      	orrs	r3, r2
 8001bac:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	f003 0308 	and.w	r3, r3, #8
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d009      	beq.n	8001bce <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001bba:	4b13      	ldr	r3, [pc, #76]	@ (8001c08 <HAL_RCC_ClockConfig+0x264>)
 8001bbc:	689b      	ldr	r3, [r3, #8]
 8001bbe:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	691b      	ldr	r3, [r3, #16]
 8001bc6:	00db      	lsls	r3, r3, #3
 8001bc8:	490f      	ldr	r1, [pc, #60]	@ (8001c08 <HAL_RCC_ClockConfig+0x264>)
 8001bca:	4313      	orrs	r3, r2
 8001bcc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001bce:	f000 f825 	bl	8001c1c <HAL_RCC_GetSysClockFreq>
 8001bd2:	4602      	mov	r2, r0
 8001bd4:	4b0c      	ldr	r3, [pc, #48]	@ (8001c08 <HAL_RCC_ClockConfig+0x264>)
 8001bd6:	689b      	ldr	r3, [r3, #8]
 8001bd8:	091b      	lsrs	r3, r3, #4
 8001bda:	f003 030f 	and.w	r3, r3, #15
 8001bde:	490c      	ldr	r1, [pc, #48]	@ (8001c10 <HAL_RCC_ClockConfig+0x26c>)
 8001be0:	5ccb      	ldrb	r3, [r1, r3]
 8001be2:	f003 031f 	and.w	r3, r3, #31
 8001be6:	fa22 f303 	lsr.w	r3, r2, r3
 8001bea:	4a0a      	ldr	r2, [pc, #40]	@ (8001c14 <HAL_RCC_ClockConfig+0x270>)
 8001bec:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8001bee:	4b0a      	ldr	r3, [pc, #40]	@ (8001c18 <HAL_RCC_ClockConfig+0x274>)
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	4618      	mov	r0, r3
 8001bf4:	f7fe ffa2 	bl	8000b3c <HAL_InitTick>
 8001bf8:	4603      	mov	r3, r0
}
 8001bfa:	4618      	mov	r0, r3
 8001bfc:	3718      	adds	r7, #24
 8001bfe:	46bd      	mov	sp, r7
 8001c00:	bd80      	pop	{r7, pc}
 8001c02:	bf00      	nop
 8001c04:	40022000 	.word	0x40022000
 8001c08:	40021000 	.word	0x40021000
 8001c0c:	04c4b400 	.word	0x04c4b400
 8001c10:	08001ddc 	.word	0x08001ddc
 8001c14:	20000054 	.word	0x20000054
 8001c18:	20000058 	.word	0x20000058

08001c1c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001c1c:	b480      	push	{r7}
 8001c1e:	b087      	sub	sp, #28
 8001c20:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8001c22:	4b2c      	ldr	r3, [pc, #176]	@ (8001cd4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001c24:	689b      	ldr	r3, [r3, #8]
 8001c26:	f003 030c 	and.w	r3, r3, #12
 8001c2a:	2b04      	cmp	r3, #4
 8001c2c:	d102      	bne.n	8001c34 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001c2e:	4b2a      	ldr	r3, [pc, #168]	@ (8001cd8 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001c30:	613b      	str	r3, [r7, #16]
 8001c32:	e047      	b.n	8001cc4 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8001c34:	4b27      	ldr	r3, [pc, #156]	@ (8001cd4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001c36:	689b      	ldr	r3, [r3, #8]
 8001c38:	f003 030c 	and.w	r3, r3, #12
 8001c3c:	2b08      	cmp	r3, #8
 8001c3e:	d102      	bne.n	8001c46 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001c40:	4b26      	ldr	r3, [pc, #152]	@ (8001cdc <HAL_RCC_GetSysClockFreq+0xc0>)
 8001c42:	613b      	str	r3, [r7, #16]
 8001c44:	e03e      	b.n	8001cc4 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8001c46:	4b23      	ldr	r3, [pc, #140]	@ (8001cd4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001c48:	689b      	ldr	r3, [r3, #8]
 8001c4a:	f003 030c 	and.w	r3, r3, #12
 8001c4e:	2b0c      	cmp	r3, #12
 8001c50:	d136      	bne.n	8001cc0 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001c52:	4b20      	ldr	r3, [pc, #128]	@ (8001cd4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001c54:	68db      	ldr	r3, [r3, #12]
 8001c56:	f003 0303 	and.w	r3, r3, #3
 8001c5a:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001c5c:	4b1d      	ldr	r3, [pc, #116]	@ (8001cd4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001c5e:	68db      	ldr	r3, [r3, #12]
 8001c60:	091b      	lsrs	r3, r3, #4
 8001c62:	f003 030f 	and.w	r3, r3, #15
 8001c66:	3301      	adds	r3, #1
 8001c68:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001c6a:	68fb      	ldr	r3, [r7, #12]
 8001c6c:	2b03      	cmp	r3, #3
 8001c6e:	d10c      	bne.n	8001c8a <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001c70:	4a1a      	ldr	r2, [pc, #104]	@ (8001cdc <HAL_RCC_GetSysClockFreq+0xc0>)
 8001c72:	68bb      	ldr	r3, [r7, #8]
 8001c74:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c78:	4a16      	ldr	r2, [pc, #88]	@ (8001cd4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001c7a:	68d2      	ldr	r2, [r2, #12]
 8001c7c:	0a12      	lsrs	r2, r2, #8
 8001c7e:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8001c82:	fb02 f303 	mul.w	r3, r2, r3
 8001c86:	617b      	str	r3, [r7, #20]
      break;
 8001c88:	e00c      	b.n	8001ca4 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001c8a:	4a13      	ldr	r2, [pc, #76]	@ (8001cd8 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001c8c:	68bb      	ldr	r3, [r7, #8]
 8001c8e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c92:	4a10      	ldr	r2, [pc, #64]	@ (8001cd4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001c94:	68d2      	ldr	r2, [r2, #12]
 8001c96:	0a12      	lsrs	r2, r2, #8
 8001c98:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8001c9c:	fb02 f303 	mul.w	r3, r2, r3
 8001ca0:	617b      	str	r3, [r7, #20]
      break;
 8001ca2:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001ca4:	4b0b      	ldr	r3, [pc, #44]	@ (8001cd4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001ca6:	68db      	ldr	r3, [r3, #12]
 8001ca8:	0e5b      	lsrs	r3, r3, #25
 8001caa:	f003 0303 	and.w	r3, r3, #3
 8001cae:	3301      	adds	r3, #1
 8001cb0:	005b      	lsls	r3, r3, #1
 8001cb2:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8001cb4:	697a      	ldr	r2, [r7, #20]
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	fbb2 f3f3 	udiv	r3, r2, r3
 8001cbc:	613b      	str	r3, [r7, #16]
 8001cbe:	e001      	b.n	8001cc4 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8001cc0:	2300      	movs	r3, #0
 8001cc2:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8001cc4:	693b      	ldr	r3, [r7, #16]
}
 8001cc6:	4618      	mov	r0, r3
 8001cc8:	371c      	adds	r7, #28
 8001cca:	46bd      	mov	sp, r7
 8001ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd0:	4770      	bx	lr
 8001cd2:	bf00      	nop
 8001cd4:	40021000 	.word	0x40021000
 8001cd8:	00f42400 	.word	0x00f42400
 8001cdc:	016e3600 	.word	0x016e3600

08001ce0 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8001ce0:	b480      	push	{r7}
 8001ce2:	b087      	sub	sp, #28
 8001ce4:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001ce6:	4b1e      	ldr	r3, [pc, #120]	@ (8001d60 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001ce8:	68db      	ldr	r3, [r3, #12]
 8001cea:	f003 0303 	and.w	r3, r3, #3
 8001cee:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001cf0:	4b1b      	ldr	r3, [pc, #108]	@ (8001d60 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001cf2:	68db      	ldr	r3, [r3, #12]
 8001cf4:	091b      	lsrs	r3, r3, #4
 8001cf6:	f003 030f 	and.w	r3, r3, #15
 8001cfa:	3301      	adds	r3, #1
 8001cfc:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8001cfe:	693b      	ldr	r3, [r7, #16]
 8001d00:	2b03      	cmp	r3, #3
 8001d02:	d10c      	bne.n	8001d1e <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001d04:	4a17      	ldr	r2, [pc, #92]	@ (8001d64 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8001d06:	68fb      	ldr	r3, [r7, #12]
 8001d08:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d0c:	4a14      	ldr	r2, [pc, #80]	@ (8001d60 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001d0e:	68d2      	ldr	r2, [r2, #12]
 8001d10:	0a12      	lsrs	r2, r2, #8
 8001d12:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8001d16:	fb02 f303 	mul.w	r3, r2, r3
 8001d1a:	617b      	str	r3, [r7, #20]
    break;
 8001d1c:	e00c      	b.n	8001d38 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001d1e:	4a12      	ldr	r2, [pc, #72]	@ (8001d68 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8001d20:	68fb      	ldr	r3, [r7, #12]
 8001d22:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d26:	4a0e      	ldr	r2, [pc, #56]	@ (8001d60 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001d28:	68d2      	ldr	r2, [r2, #12]
 8001d2a:	0a12      	lsrs	r2, r2, #8
 8001d2c:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8001d30:	fb02 f303 	mul.w	r3, r2, r3
 8001d34:	617b      	str	r3, [r7, #20]
    break;
 8001d36:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001d38:	4b09      	ldr	r3, [pc, #36]	@ (8001d60 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001d3a:	68db      	ldr	r3, [r3, #12]
 8001d3c:	0e5b      	lsrs	r3, r3, #25
 8001d3e:	f003 0303 	and.w	r3, r3, #3
 8001d42:	3301      	adds	r3, #1
 8001d44:	005b      	lsls	r3, r3, #1
 8001d46:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8001d48:	697a      	ldr	r2, [r7, #20]
 8001d4a:	68bb      	ldr	r3, [r7, #8]
 8001d4c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d50:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8001d52:	687b      	ldr	r3, [r7, #4]
}
 8001d54:	4618      	mov	r0, r3
 8001d56:	371c      	adds	r7, #28
 8001d58:	46bd      	mov	sp, r7
 8001d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d5e:	4770      	bx	lr
 8001d60:	40021000 	.word	0x40021000
 8001d64:	016e3600 	.word	0x016e3600
 8001d68:	00f42400 	.word	0x00f42400

08001d6c <memset>:
 8001d6c:	4402      	add	r2, r0
 8001d6e:	4603      	mov	r3, r0
 8001d70:	4293      	cmp	r3, r2
 8001d72:	d100      	bne.n	8001d76 <memset+0xa>
 8001d74:	4770      	bx	lr
 8001d76:	f803 1b01 	strb.w	r1, [r3], #1
 8001d7a:	e7f9      	b.n	8001d70 <memset+0x4>

08001d7c <__libc_init_array>:
 8001d7c:	b570      	push	{r4, r5, r6, lr}
 8001d7e:	4d0d      	ldr	r5, [pc, #52]	@ (8001db4 <__libc_init_array+0x38>)
 8001d80:	4c0d      	ldr	r4, [pc, #52]	@ (8001db8 <__libc_init_array+0x3c>)
 8001d82:	1b64      	subs	r4, r4, r5
 8001d84:	10a4      	asrs	r4, r4, #2
 8001d86:	2600      	movs	r6, #0
 8001d88:	42a6      	cmp	r6, r4
 8001d8a:	d109      	bne.n	8001da0 <__libc_init_array+0x24>
 8001d8c:	4d0b      	ldr	r5, [pc, #44]	@ (8001dbc <__libc_init_array+0x40>)
 8001d8e:	4c0c      	ldr	r4, [pc, #48]	@ (8001dc0 <__libc_init_array+0x44>)
 8001d90:	f000 f818 	bl	8001dc4 <_init>
 8001d94:	1b64      	subs	r4, r4, r5
 8001d96:	10a4      	asrs	r4, r4, #2
 8001d98:	2600      	movs	r6, #0
 8001d9a:	42a6      	cmp	r6, r4
 8001d9c:	d105      	bne.n	8001daa <__libc_init_array+0x2e>
 8001d9e:	bd70      	pop	{r4, r5, r6, pc}
 8001da0:	f855 3b04 	ldr.w	r3, [r5], #4
 8001da4:	4798      	blx	r3
 8001da6:	3601      	adds	r6, #1
 8001da8:	e7ee      	b.n	8001d88 <__libc_init_array+0xc>
 8001daa:	f855 3b04 	ldr.w	r3, [r5], #4
 8001dae:	4798      	blx	r3
 8001db0:	3601      	adds	r6, #1
 8001db2:	e7f2      	b.n	8001d9a <__libc_init_array+0x1e>
 8001db4:	08001dec 	.word	0x08001dec
 8001db8:	08001dec 	.word	0x08001dec
 8001dbc:	08001dec 	.word	0x08001dec
 8001dc0:	08001df0 	.word	0x08001df0

08001dc4 <_init>:
 8001dc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001dc6:	bf00      	nop
 8001dc8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001dca:	bc08      	pop	{r3}
 8001dcc:	469e      	mov	lr, r3
 8001dce:	4770      	bx	lr

08001dd0 <_fini>:
 8001dd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001dd2:	bf00      	nop
 8001dd4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001dd6:	bc08      	pop	{r3}
 8001dd8:	469e      	mov	lr, r3
 8001dda:	4770      	bx	lr
